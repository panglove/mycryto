"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./zns/utils");
var index_1 = require("./index");
var namingService_1 = __importDefault(require("./namingService"));
var types_1 = require("./types");
var zns_1 = __importDefault(require("./zns"));
var ens_1 = __importDefault(require("./ens"));
var cns_1 = __importDefault(require("./cns"));
var package_json_1 = __importDefault(require("./package.json"));
var Udapi = /** @class */ (function (_super) {
    __extends(Udapi, _super);
    function Udapi(url) {
        var _this = _super.call(this) || this;
        _this.name = 'UDAPI';
        _this.url = url;
        var DefaultUserAgent = _this.isNode()
            ? 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)'
            : navigator.userAgent;
        var version = package_json_1.default.version;
        var CustomUserAgent = DefaultUserAgent + " Resolution/" + version;
        _this.headers = { 'X-user-agent': CustomUserAgent };
        return _this;
    }
    /** @internal */
    Udapi.prototype.isSupportedDomain = function (domain) {
        return !!this.findMethod(domain);
    };
    /** @internal */
    Udapi.prototype.isSupportedNetwork = function () {
        return true;
    };
    /** @internal */
    Udapi.prototype.namehash = function (domain) {
        var method = this.findMethod(domain);
        if (!method)
            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        return method.namehash(domain);
    };
    /**
     * Resolves the domain via UD API mirror
     * @param domain - domain name to be resolved
     * @param currencyTicker - currencyTicker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     */
    Udapi.prototype.address = function (domain, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var data, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        data = _a.sent();
                        if (!data.meta.owner || types_1.isNullAddress(data.meta.owner))
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        address = data.addresses[currencyTicker.toUpperCase()];
                        if (!address)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnspecifiedCurrency, {
                                domain: domain,
                                currencyTicker: currencyTicker,
                            });
                        return [2 /*return*/, address];
                }
            });
        });
    };
    /**
     * Owner of the domain
     * @param domain - domain name
     * @returns An owner address of the domain
     */
    Udapi.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var owner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        owner = (_a.sent()).meta.owner;
                        if (!owner)
                            return [2 /*return*/, null];
                        return [2 /*return*/, owner.startsWith('zil1') ? owner : utils_1.toBech32Address(owner)];
                }
            });
        });
    };
    /**
     * Resolves ipfshash from domain
     * @param domain - domain name
     * @throws ResolutionError.RecordNotFound if not found
     */
    Udapi.prototype.ipfsHash = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var answer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        answer = _a.sent();
                        if (!answer || !answer.ipfs || !answer.ipfs.html)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: 'IPFS hash',
                                domain: domain,
                            });
                        return [2 /*return*/, answer.ipfs.html];
                }
            });
        });
    };
    /**
     * Resolves email from domain
     * @param domain - domain name
     * @throws ResolutionError.RecordNotFound if not found
     */
    Udapi.prototype.email = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var answer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        answer = _a.sent();
                        if (!answer || !answer.whois || !answer.whois.email)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: 'email',
                                domain: domain,
                            });
                        return [2 /*return*/, answer.whois.email];
                }
            });
        });
    };
    /**
     * Resolves httpUrl from domain
     * @param domain - domain name
     * @throws ResolutionError.RecordNotFound if not found
     */
    Udapi.prototype.httpUrl = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var answer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        answer = _a.sent();
                        if (!answer || !answer.ipfs || !answer.ipfs.redirect_domain)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: 'httpUrl',
                                domain: domain,
                            });
                        return [2 /*return*/, answer.ipfs.redirect_domain];
                }
            });
        });
    };
    /**
     * Resolves the domain name via UD API mirror
     * @param domain - domain name to be resolved
     */
    Udapi.prototype.resolve = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.fetch(this.url + "/" + domain, {
                                method: 'GET',
                                headers: this.headers,
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1.name !== 'FetchError')
                            throw error_1;
                        throw new index_1.ResolutionError(index_1.ResolutionErrorCode.NamingServiceDown, {
                            method: this.name,
                        });
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns naming service name
     * @param domain - domain name
     */
    Udapi.prototype.serviceName = function (domain) {
        return this.findMethodOrThrow(domain).name;
    };
    /**
     * Not implemented for this naming service
     * @param domain
     */
    Udapi.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Method not implemented.');
            });
        });
    };
    /** @internal */
    Udapi.prototype.normalizeSource = function (source) {
        throw new Error('Method not implemented.');
    };
    Udapi.prototype.findMethod = function (domain) {
        return [new zns_1.default(), new ens_1.default(), new cns_1.default()].find(function (m) {
            return m.isSupportedDomain(domain);
        });
    };
    Udapi.prototype.findMethodOrThrow = function (domain) {
        var method = this.findMethod(domain);
        if (!method)
            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        return method;
    };
    /**
     * Looks up for an arbitrary key inside the records of certain domain
     * @param domain - domain name
     * @param key - key to look for
     */
    Udapi.prototype.record = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findMethodOrThrow(domain).record(domain, key)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Udapi;
}(namingService_1.default));
exports.default = Udapi;
