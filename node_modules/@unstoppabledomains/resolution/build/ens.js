"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ens_1 = __importDefault(require("./ens/contract/ens"));
var resolver_1 = __importDefault(require("./ens/contract/resolver"));
var namehash_1 = __importStar(require("./ens/namehash"));
var address_encoder_1 = require("@ensdomains/address-encoder");
var types_1 = require("./types");
var namingService_1 = require("./namingService");
var index_1 = require("./index");
var content_hash_1 = __importDefault(require("content-hash"));
var RegistryMap = {
    mainnet: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
    ropsten: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
};
/**
 * Class to support connection with Ethereum naming service
 * @param network - network string such as
 * - mainnet
 * - ropsten
 * @param url - main api url such as
 * - https://mainnet.infura.io
 * @param registryAddress - address for a registry contract
 */
var Ens = /** @class */ (function (_super) {
    __extends(Ens, _super);
    /**
     * Source object describing the network naming service operates on
     * @param source - if specified as a string will be used as main url, if omited then defaults are used
     * @throws ConfigurationError - when either network or url is setup incorrectly
     */
    function Ens(source, web3Provider) {
        if (source === void 0) { source = true; }
        var _this = _super.call(this, web3Provider) || this;
        _this.name = types_1.NamingServiceName.ENS;
        source = _this.normalizeSource(source);
        _this.network = source.network;
        _this.url = source.url;
        if (!_this.network) {
            throw new Error('Unspecified network in Resolution ENS configuration');
        }
        if (!_this.url) {
            throw new Error('Unspecified url in Resolution ENS configuration');
        }
        _this.registryAddress = source.registry
            ? source.registry
            : RegistryMap[_this.network];
        if (_this.registryAddress) {
            _this.registryContract = _this.buildContract(ens_1.default, _this.registryAddress);
        }
        return _this;
    }
    /**
     * Checks if the domain is in valid format
     * @param domain - domain name to be checked
     */
    Ens.prototype.isSupportedDomain = function (domain) {
        return (domain === 'eth' ||
            (domain.indexOf('.') > 0 &&
                /^[^-]*[^-]*\.(eth|luxe|xyz|kred)$/.test(domain) &&
                domain.split('.').every(function (v) { return !!v.length; })));
    };
    /**
     * Checks if the current network is supported
     */
    Ens.prototype.isSupportedNetwork = function () {
        return this.registryAddress != null;
    };
    /** @internal */
    Ens.prototype.record = function (domain, key) {
        throw new Error('Method not implemented.');
    };
    /**
     * Reverse the ens address to a ens registered domain name
     * @async
     * @param address - address you wish to reverse
     * @param currencyTicker - currency ticker like BTC, ETH, ZIL
     * @returns Domain name attached to this address
     */
    Ens.prototype.reverse = function (address, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var reverseAddress, nodeHash, resolverAddress, resolverContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (currencyTicker != 'ETH') {
                            throw new Error("Ens doesn't support any currency other than ETH");
                        }
                        if (address.startsWith('0x')) {
                            address = address.substr(2);
                        }
                        reverseAddress = address + '.addr.reverse';
                        nodeHash = namehash_1.default(reverseAddress);
                        return [4 /*yield*/, this.getResolver(nodeHash)];
                    case 1:
                        resolverAddress = _a.sent();
                        if (types_1.isNullAddress(resolverAddress)) {
                            return [2 /*return*/, null];
                        }
                        resolverContract = this.buildContract(resolver_1.default(resolverAddress, types_1.EthCoinIndex), resolverAddress);
                        return [4 /*yield*/, this.resolverCallToName(resolverContract, nodeHash)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Resolves domain to a specific cryptoAddress
     * @param domain - domain name to be resolved
     * @param currencyTicker - specific currency ticker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     * @returns A promise that resolves in a string
     * @throws ResolutionError
     */
    Ens.prototype.address = function (domain, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, ownerPromise, resolver, coinType, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        ownerPromise = this.owner(domain);
                        return [4 /*yield*/, this.getResolver(nodeHash)];
                    case 1:
                        resolver = _a.sent();
                        if (!(!resolver || types_1.isNullAddress(resolver))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.throwOwnershipError(domain, ownerPromise)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        coinType = this.getCoinType(currencyTicker.toUpperCase());
                        return [4 /*yield*/, this.fetchAddressOrThrow(resolver, nodeHash, coinType)];
                    case 4:
                        addr = _a.sent();
                        if (!addr)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnspecifiedCurrency, {
                                domain: domain,
                                currencyTicker: currencyTicker,
                            });
                        return [2 /*return*/, addr];
                }
            });
        });
    };
    /**
     * Owner of the domain
     * @param domain - domain name
     * @returns An owner address of the domain
     */
    Ens.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.ignoreResolutionError(index_1.ResolutionErrorCode.RecordNotFound, this.getOwner(nodeHash))];
                    case 1: return [2 /*return*/, ((_a.sent()) || null)];
                }
            });
        });
    };
    /**
     * Resolves the given domain
     * @async
     * @param domain - domain name to be resolved
     * @returns A promise that resolves in an object
     */
    Ens.prototype.resolve = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, _a, owner, ttl, resolver, address, resolution;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork()) {
                            return [2 /*return*/, null];
                        }
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.getResolutionInfo(domain)];
                    case 1:
                        _a = _b.sent(), owner = _a[0], ttl = _a[1], resolver = _a[2];
                        if (types_1.isNullAddress(owner))
                            owner = null;
                        return [4 /*yield*/, this.fetchAddress(resolver, nodeHash, types_1.EthCoinIndex)];
                    case 2:
                        address = _b.sent();
                        resolution = {
                            meta: {
                                owner: owner,
                                type: this.name,
                                ttl: Number(ttl),
                            },
                            addresses: {},
                        };
                        if (address)
                            resolution.addresses = { ETH: address };
                        return [2 /*return*/, resolution];
                }
            });
        });
    };
    /**
     * resolves an ipfsHash stored on domain
     * @param domain - domain name
     */
    Ens.prototype.ipfsHash = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var hash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContentHash(domain)];
                    case 1:
                        hash = _a.sent();
                        if (!hash)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: 'IPFS hash',
                                domain: domain,
                            });
                        return [2 /*return*/, hash];
                }
            });
        });
    };
    /**
     * resolves a httpUrl stored on domain
     * @param domain - domain name
     */
    Ens.prototype.httpUrl = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver, httpUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getResolverContract(domain)];
                    case 1:
                        resolver = _a.sent();
                        return [4 /*yield*/, this.getTextRecord(resolver, domain, 'url')];
                    case 2:
                        httpUrl = _a.sent();
                        return [2 /*return*/, httpUrl];
                }
            });
        });
    };
    /**
     * resolves an email stored on domain
     * @param domain - domain name
     */
    Ens.prototype.email = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getResolverContract(domain)];
                    case 1:
                        resolver = _a.sent();
                        return [4 /*yield*/, this.getTextRecord(resolver, domain, 'email')];
                    case 2:
                        email = _a.sent();
                        return [2 /*return*/, email];
                }
            });
        });
    };
    /**
     * Produces ENS namehash
     * @param domain - domain to be hashed
     * @returns ENS namehash of a domain
     */
    Ens.prototype.namehash = function (domain) {
        this.ensureSupportedDomain(domain);
        return namehash_1.default(domain);
    };
    Ens.prototype.getContentHash = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, resolverContract, contentHashEncoded, codec;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.getResolverContract(domain)];
                    case 1:
                        resolverContract = _a.sent();
                        return [4 /*yield*/, this.callMethod(resolverContract, 'contenthash', [nodeHash])];
                    case 2:
                        contentHashEncoded = _a.sent();
                        codec = content_hash_1.default.getCodec(contentHashEncoded);
                        if (codec !== 'ipfs-ns')
                            return [2 /*return*/, undefined];
                        return [2 /*return*/, content_hash_1.default.decode(contentHashEncoded)];
                }
            });
        });
    };
    Ens.prototype.getTextRecord = function (resolver, domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, this.callMethod(resolver, 'text', [nodeHash, key])];
                    case 1:
                        record = _a.sent();
                        if (!record)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound, {
                                recordName: key,
                                domain: domain,
                            });
                        return [2 /*return*/, record];
                }
            });
        });
    };
    Ens.prototype.getResolverContract = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, ownerPromise, resolverAddress, resolverContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        ownerPromise = this.owner(domain);
                        return [4 /*yield*/, this.getResolver(nodeHash)];
                    case 1:
                        resolverAddress = _a.sent();
                        if (!(!resolverAddress || types_1.isNullAddress(resolverAddress))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.throwOwnershipError(domain, ownerPromise)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        resolverContract = this.buildContract(resolver_1.default(resolverAddress), resolverAddress);
                        return [2 /*return*/, resolverContract];
                }
            });
        });
    };
    /**
     * Returns the childhash
     * @param parent - nodehash of a parent
     * @param label - child
     */
    Ens.prototype.childhash = function (parent, label, options) {
        if (options === void 0) { options = { prefix: true }; }
        return namehash_1.childhash(parent, label, options);
    };
    /**
     * This was done to make automated tests more configurable
     */
    Ens.prototype.resolverCallToName = function (resolverContract, nodeHash) {
        return this.callMethod(resolverContract, 'name', [nodeHash]);
    };
    Ens.prototype.getTTL = function (nodeHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ignoreResolutionError(index_1.ResolutionErrorCode.RecordNotFound, this.callMethod(this.registryContract, 'ttl', [nodeHash]))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * This was done to make automated tests more configurable
     */
    Ens.prototype.getResolver = function (nodeHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ignoreResolutionError(index_1.ResolutionErrorCode.RecordNotFound, this.callMethod(this.registryContract, 'resolver', [nodeHash]))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * This was done to make automated tests more configurable
     */
    Ens.prototype.getOwner = function (nodeHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callMethod(this.registryContract, 'owner', [nodeHash])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * This was done to make automated tests more configurable
     */
    Ens.prototype.getResolutionInfo = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        return [4 /*yield*/, Promise.all([
                                this.owner(domain),
                                this.getTTL(nodeHash),
                                this.getResolver(nodeHash),
                            ])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** @internal */
    Ens.prototype.getCoinType = function (currencyTicker) {
        var constants = require('bip44-constants');
        var coin = constants.findIndex(function (item) {
            return item[1] === currencyTicker.toUpperCase() ||
                item[2] === currencyTicker.toUpperCase();
        });
        if (coin < 0 || !address_encoder_1.formatsByCoinType[coin])
            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnsupportedCurrency, {
                currencyTicker: currencyTicker,
            });
        return coin;
    };
    Ens.prototype.fetchAddressOrThrow = function (resolver, nodeHash, coinType) {
        return __awaiter(this, void 0, void 0, function () {
            var resolverContract, addr, _a, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!resolver || types_1.isNullAddress(resolver)) {
                            return [2 /*return*/, null];
                        }
                        resolverContract = this.buildContract(resolver_1.default(resolver, coinType), resolver);
                        if (!(coinType != types_1.EthCoinIndex)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.callMethod(resolverContract, 'addr', [nodeHash, coinType])];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.callMethod(resolverContract, 'addr', [nodeHash])];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        addr = _a;
                        if (!addr || addr === '0x')
                            return [2 /*return*/, null];
                        data = Buffer.from(addr.replace('0x', ''), 'hex');
                        return [2 /*return*/, address_encoder_1.formatsByCoinType[coinType].encoder(data)];
                }
            });
        });
    };
    Ens.prototype.fetchAddress = function (resolver, nodeHash, coin) {
        if (coin === void 0) { coin = types_1.EthCoinIndex; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ignoreResolutionError(index_1.ResolutionErrorCode.RecordNotFound, this.fetchAddressOrThrow(resolver, nodeHash, coin))];
                    case 1: return [2 /*return*/, ((_a.sent()) || null)];
                }
            });
        });
    };
    return Ens;
}(namingService_1.EthereumNamingService));
exports.default = Ens;
