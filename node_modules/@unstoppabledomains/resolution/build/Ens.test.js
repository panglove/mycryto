"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var nock_1 = __importDefault(require("nock"));
var index_1 = __importStar(require("./index"));
var ens_1 = __importDefault(require("./ens"));
var types_1 = require("./types");
var testHelpers_1 = require("./utils/testHelpers");
var resolution;
try {
    var dotenv = require('dotenv');
    dotenv.config();
}
catch (err) {
    console.warn('dotenv is not installed');
}
beforeEach(function () {
    nock_1.default.cleanAll();
    jest.restoreAllMocks();
    resolution = new index_1.default({
        blockchain: { ens: { url: testHelpers_1.secretInfuraLink() } },
    });
});
describe('ENS', function () {
    it('allows ens network specified as string', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: { ens: { network: 'mainnet' } },
            });
            expect(resolution.ens.url).toBe('https://mainnet.infura.io');
            expect(resolution.ens.network).toEqual('mainnet');
            return [2 /*return*/];
        });
    }); });
    it('resolves .eth name using blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, eyes, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    resolution = new index_1.default({
                        blockchain: { ens: { url: testHelpers_1.secretInfuraLink() } },
                    });
                    expect(resolution.ens.url).toBe(testHelpers_1.secretInfuraLink());
                    expect(resolution.ens.network).toEqual('mainnet');
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                        getResolver: '0x5FfC014343cd971B7eb70732021E26C35B744cc4',
                        fetchAddressOrThrow: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                    });
                    _a = expect;
                    return [4 /*yield*/, resolution.address('matthewgould.eth', 'ETH')];
                case 1:
                    _a.apply(void 0, [_c.sent()]).toEqual('0x714ef33943d925731FBB89C99aF5780D888bD106');
                    _b = expect;
                    return [4 /*yield*/, resolution.owner('matthewgould.eth')];
                case 2:
                    _b.apply(void 0, [_c.sent()]).toEqual('0x714ef33943d925731FBB89C99aF5780D888bD106');
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    return [2 /*return*/];
            }
        });
    }); });
    it('reverses address to ENS domain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        resolverCallToName: 'adrian.argent.xyz',
                        getResolver: '0xDa1756Bb923Af5d1a05E277CB1E54f1D0A127890',
                    });
                    return [4 /*yield*/, resolution.ens.reverse('0xb0E7a465D255aE83eb7F8a50504F3867B945164C', 'ETH')];
                case 1:
                    result = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(result).toEqual('adrian.argent.xyz');
                    return [2 /*return*/];
            }
        });
    }); });
    it('reverses address to ENS domain null', function () { return __awaiter(void 0, void 0, void 0, function () {
        var spy, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spy = testHelpers_1.mockAsyncMethod(resolution.ens, 'getResolver', types_1.NullAddress[1]);
                    return [4 /*yield*/, resolution.ens.reverse('0x112234455c3a32fd11230c42e7bccd4a84e02010', 'ETH')];
                case 1:
                    result = _a.sent();
                    testHelpers_1.expectSpyToBeCalled([spy]);
                    expect(result).toEqual(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .xyz name using ENS blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0xb0E7a465D255aE83eb7F8a50504F3867B945164C',
                        getResolver: '0xDa1756Bb923Af5d1a05E277CB1E54f1D0A127890',
                        fetchAddressOrThrow: '0xb0E7a465D255aE83eb7F8a50504F3867B945164C',
                    });
                    return [4 /*yield*/, resolution.address('adrian.argent.xyz', 'ETH')];
                case 1:
                    result = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(result).toEqual('0xb0E7a465D255aE83eb7F8a50504F3867B945164C');
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .luxe name using ENS blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0xf3dE750A73C11a6a2863761E930BF5fE979d5663',
                        getResolver: '0xBD5F5ec7ed5f19b53726344540296C02584A5237',
                        fetchAddressOrThrow: '0xf3dE750A73C11a6a2863761E930BF5fE979d5663',
                    });
                    return [4 /*yield*/, resolution.address('john.luxe', 'ETH')];
                case 1:
                    result = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(result).toEqual('0xf3dE750A73C11a6a2863761E930BF5fE979d5663');
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .kred name using ENS blockchain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x96184444629F3489c4dE199871E6F99568229d8f',
                    });
                    return [4 /*yield*/, resolution.address('brantly.kred', 'ETH')];
                case 1:
                    result = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(result).toEqual('0x96184444629F3489c4dE199871E6F99568229d8f');
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .luxe name using ENS blockchain with safe null return', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ownerEye, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ownerEye = testHelpers_1.mockAsyncMethod(resolution.ens, 'getOwner', types_1.NullAddress[1]);
                    return [4 /*yield*/, resolution.address('something.luxe', 'ETH')];
                case 1:
                    result = _a.sent();
                    testHelpers_1.expectSpyToBeCalled([ownerEye]);
                    expect(result).toEqual(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves .luxe name using ENS blockchain with thrown error', function () { return __awaiter(void 0, void 0, void 0, function () {
        var spies;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spies = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getResolver: undefined,
                    });
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.addressOrThrow('something.luxe', 'ETH'), index_1.ResolutionErrorCode.UnregisteredDomain)];
                case 1:
                    _a.sent();
                    testHelpers_1.expectSpyToBeCalled(spies);
                    return [2 /*return*/];
            }
        });
    }); });
    it('resolves name with resolver but without an owner', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, doge;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: types_1.NullAddress[1],
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x76a9144620b70031f0e9437e374a2100934fba4911046088ac',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'DOGE')];
                case 1:
                    doge = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(doge).toBe('DBXu2kgc3xtvCUWFcxFE3r9hEYgmuaaCyD');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks if the network is supported(true)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens, answer;
        return __generator(this, function (_a) {
            ens = new ens_1.default({ network: 1 });
            answer = ens.isSupportedNetwork();
            expect(answer).toBe(true);
            return [2 /*return*/];
        });
    }); });
    it('checks if the network is supported(false)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens, answer;
        return __generator(this, function (_a) {
            ens = new ens_1.default({ network: 5 });
            answer = ens.isSupportedNetwork();
            expect(answer).toBe(false);
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (boolean)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({ blockchain: { ens: true } });
            expect(resolution.ens.network).toBe('mainnet');
            expect(resolution.ens.url).toBe('https://mainnet.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (boolean - false)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ens;
        return __generator(this, function (_a) {
            ens = new ens_1.default({ network: 5 });
            expect(ens.network).toBe('goerli');
            expect(ens.url).toBe('https://goerli.infura.io');
            expect(ens.isSupportedNetwork()).toBeFalsy();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #1', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(resolution.ens.network).toBe('mainnet');
            expect(resolution.ens.url).toBe(testHelpers_1.secretInfuraLink());
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #2', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({ blockchain: { ens: { network: 3 } } });
            expect(resolution.ens.network).toBe('ropsten');
            expect(resolution.ens.url).toBe('https://ropsten.infura.io');
            expect(resolution.ens.registryAddress).toBe('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #3', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: { ens: { url: 'https://rinkeby.infura.io' } },
            });
            expect(resolution.ens.network).toBe('rinkeby');
            expect(resolution.ens.url).toBe('https://rinkeby.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #4', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: { ens: { url: 'https://goerli.infura.io', network: 5 } },
            });
            expect(resolution.ens.network).toBe('goerli');
            expect(resolution.ens.url).toBe('https://goerli.infura.io');
            expect(resolution.ens.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #6', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new index_1.default({ blockchain: { ens: { network: 7543 } } }); }).toThrowError('Unspecified network in Resolution ENS configuration');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #7', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return new index_1.default({ blockchain: { ens: { network: 'invalid' } } }); }).toThrowError('Unspecified url in Resolution ENS configuration');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #8', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: { ens: { network: 'mainnet' } },
            });
            expect(resolution.ens.network).toBe('mainnet');
            expect(resolution.ens.url).toBe('https://mainnet.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #9', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: { ens: { network: 'kovan' } },
            });
            expect(resolution.ens.network).toBe('kovan');
            expect(resolution.ens.url).toBe('https://kovan.infura.io');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #10', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: {
                    ens: { registry: '0x314159265dd8dbb310642f98f50c066173c1259b' },
                },
            });
            expect(resolution.ens.network).toBe('mainnet');
            expect(resolution.ens.url).toBe('https://mainnet.infura.io');
            expect(resolution.ens.registryAddress).toBe('0x314159265dd8dbb310642f98f50c066173c1259b');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #11', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: {
                    ens: {
                        network: 'ropsten',
                        registry: '0x112234455c3a32fd11230c42e7bccd4a84e02010',
                    },
                },
            });
            expect(resolution.ens.network).toBe('ropsten');
            expect(resolution.ens.url).toBe('https://ropsten.infura.io');
            expect(resolution.ens.registryAddress).toBe('0x112234455c3a32fd11230c42e7bccd4a84e02010');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #12', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: {
                    ens: { registry: '0xabcffff1231586348194fcabbeff1231240234fc' },
                },
            });
            expect(resolution.ens.network).toBe('mainnet');
            expect(resolution.ens.url).toBe('https://mainnet.infura.io');
            expect(resolution.ens.registryAddress).toBe('0xabcffff1231586348194fcabbeff1231240234fc');
            return [2 /*return*/];
        });
    }); });
    it('checks normalizeSource ens (object) #13', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({
                blockchain: {
                    ens: { network: 'custom', url: 'https://custom.notinfura.io' },
                },
            });
            expect(resolution.ens.network).toBe('custom');
            expect(resolution.ens.url).toBe('https://custom.notinfura.io');
            expect(resolution.ens.registryAddress).toBeUndefined();
            return [2 /*return*/];
        });
    }); });
    it('checks ens multicoin support #1', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, doge;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x76a9144620b70031f0e9437e374a2100934fba4911046088ac',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'DOGE')];
                case 1:
                    doge = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(doge).toBe('DBXu2kgc3xtvCUWFcxFE3r9hEYgmuaaCyD');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #2', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, ltc;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0xa914e8604d28ef5d2a7caafe8741e5dd4816b7cb19ea87',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'LTC')];
                case 1:
                    ltc = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(ltc).toBe('MV5rN5EcX1imDS2gEh5jPJXeiW5QN8YrK3');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #3', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, eth;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x314159265dd8dbb310642f98f50c066173c1259b',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'ETH')];
                case 1:
                    eth = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(eth).toBe('0x314159265dD8dbb310642f98f50C066173C1259b');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #4', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, etc;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x314159265dd8dbb310642f98f50c066173c1259b',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'etc')];
                case 1:
                    etc = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(etc).toBe('0x314159265dD8dbb310642f98f50C066173C1259b');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #5', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, rsk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x314159265dd8dbb310642f98f50c066173c1259b',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'rsk')];
                case 1:
                    rsk = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(rsk).toBe('0x314159265dD8DbB310642F98f50C066173c1259B');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #6', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, xrp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x05444b4e9c06f24296074f7bc48f92a97916c6dc5ea9000000000000000000',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'xrp')];
                case 1:
                    xrp = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(xrp).toBe('X7qvLs7gSnNoKvZzNWUT2e8st17QPY64PPe7zriLNuJszeg');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #7', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, bch;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x76a91476a04053bda0a88bda5177b86a15c3b29f55987388ac',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'bch')];
                case 1:
                    bch = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(bch).toBe('bitcoincash:qpm2qsznhks23z7629mms6s4cwef74vcwvy22gdx6a');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks ens multicoin support #8', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, btc;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getOwner: '0x0904Dac3347eA47d208F3Fd67402D039a3b99859',
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        callMethod: '0x5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6',
                    });
                    return [4 /*yield*/, resolution.ens.address('testthing.eth', 'BTC')];
                case 1:
                    btc = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(btc).toBe('bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks UnsupportedCurrency error', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                    });
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.addressOrThrow('testthing.eth', 'bnb'), index_1.ResolutionErrorCode.UnsupportedCurrency)];
                case 1:
                    _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks UnsupportedCurrency error', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                        getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                    });
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.addressOrThrow('testthing.eth', 'UNREALTICKER'), index_1.ResolutionErrorCode.UnsupportedCurrency)];
                case 1:
                    _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    return [2 /*return*/];
            }
        });
    }); });
    describe('.resolve', function () {
        it('passes without any errors', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, resolutionObj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getOwner: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                            getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                            getTTL: 0,
                            callMethod: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                        });
                        return [4 /*yield*/, resolution.resolve('matthewgould.eth')];
                    case 1:
                        resolutionObj = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(resolutionObj).toStrictEqual({
                            addresses: { ETH: '0x714ef33943d925731FBB89C99aF5780D888bD106' },
                            meta: {
                                owner: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                                type: 'ENS',
                                ttl: 0,
                            },
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns undefined address', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getOwner: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                            getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                            getTTL: 0,
                            fetchAddressOrThrow: new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound),
                        });
                        return [4 /*yield*/, resolution.resolve('matthewgould.eth')];
                    case 1:
                        result = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(result).toStrictEqual({
                            addresses: {},
                            meta: {
                                owner: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                                type: 'ENS',
                                ttl: 0,
                            },
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('resolve to null for empty .eth record', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect(resolution.ens.url).toBe(testHelpers_1.secretInfuraLink());
                        expect(resolution.ens.network).toEqual('mainnet');
                        eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getOwner: '0x714ef33943d925731FBB89C99aF5780D888bD106',
                            getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                        });
                        _a = expect;
                        return [4 /*yield*/, resolution.address('qwdqwd.eth', 'XRP')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual(null);
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return correct resolver address', function () { return __awaiter(void 0, void 0, void 0, function () {
            var spies, resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spies = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getResolver: '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41',
                        });
                        return [4 /*yield*/, resolution.resolver('almonit.eth')];
                    case 1:
                        resolverAddress = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(spies);
                        expect(resolverAddress).toBe('0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should not find a resolver address', function () { return __awaiter(void 0, void 0, void 0, function () {
            var spies;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spies = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getResolver: undefined,
                        });
                        return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.resolver('empty.eth'), index_1.ResolutionErrorCode.UnspecifiedResolver)];
                    case 1:
                        _a.sent();
                        testHelpers_1.expectSpyToBeCalled(spies);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.Hashing', function () {
        describe('.namehash', function () {
            it('supports root node', function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    expect(resolution.ens.isSupportedDomain('eth')).toEqual(true);
                    expect(resolution.ens.namehash('eth')).toEqual('0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae');
                    return [2 /*return*/];
                });
            }); });
            it('should hash appropriately', function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    expect(resolution.ens.namehash('alice.eth')).toBe('0x787192fc5378cc32aa956ddfdedbf26b24e8d78e40109add0eea2c1a012c3dec');
                    return [2 /*return*/];
                });
            }); });
            describe('.domain invalid format', function () {
                it('starts with -', function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                expect(resolution.ens.isSupportedDomain('-hello.eth')).toEqual(false);
                                return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(function () { return resolution.namehash('-hello.eth'); }, index_1.ResolutionErrorCode.UnsupportedDomain)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('ends with -', function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                expect(resolution.isSupportedDomain('hello-.eth')).toEqual(false);
                                return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(function () { return resolution.namehash('hello-.eth'); }, index_1.ResolutionErrorCode.UnsupportedDomain)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('starts and ends with -', function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                expect(resolution.isSupportedDomain('-hello-.eth')).toEqual(false);
                                return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(function () { return resolution.namehash('-hello-.eth'); }, index_1.ResolutionErrorCode.UnsupportedDomain)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        });
        describe('.childhash', function () {
            it('tests childhash functionality', function () {
                var domain = 'hello.world.eth';
                var namehash = resolution.ens.namehash(domain);
                var childhash = resolution.ens.childhash(resolution.ens.namehash('world.eth'), 'hello');
                expect(childhash).toBe(namehash);
            });
            it('checks root eth domain', function () {
                var rootHash = '0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae';
                expect(resolution.ens.namehash('eth')).toBe(rootHash);
                expect(resolution.ens.childhash('0000000000000000000000000000000000000000000000000000000000000000', 'eth')).toBe(rootHash);
            });
            it('checks childhash multi level domain', function () {
                var domain = 'ich.ni.san.yon.hello.world.eth';
                var namehash = resolution.ens.namehash(domain);
                var childhash = resolution.ens.childhash(resolution.ens.namehash('ni.san.yon.hello.world.eth'), 'ich');
                expect(childhash).toBe(namehash);
            });
        });
    });
    describe('.Metadata', function () {
        it('should return a valid ipfsHash', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, ipfsHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getResolver: '0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8',
                            callMethod: '0xe3010170122058cf8d62a59dff0d7aa81492b66d262f27a8a684767238209243ad0309ecff5e',
                        });
                        return [4 /*yield*/, resolution.ipfsHash('almonit.eth')];
                    case 1:
                        ipfsHash = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(ipfsHash).toBe('QmUKL9VYzSvM9bSZQPgExtALCrRhK2VLFNjzsXLNRcbaGM');
                        return [2 /*return*/];
                }
            });
        }); });
        //todo(johny) find some domains with url property set
        it('should not find an appropriate httpUrl', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, httpUrlPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getResolver: '0x5FfC014343cd971B7eb70732021E26C35B744cc4',
                            callMethod: '',
                        });
                        httpUrlPromise = resolution.httpUrl('matthewgould.eth');
                        return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(httpUrlPromise, index_1.ResolutionErrorCode.RecordNotFound)];
                    case 1:
                        _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should return resolution error for not finding the email', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, emailPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = testHelpers_1.mockAsyncMethods(resolution.ens, {
                            getResolver: '0x5FfC014343cd971B7eb70732021E26C35B744cc4',
                            callMethod: '',
                        });
                        emailPromise = resolution.email('matthewgould.eth');
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(emailPromise, index_1.ResolutionErrorCode.RecordNotFound)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
