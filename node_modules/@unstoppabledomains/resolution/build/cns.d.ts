import { EthereumNamingService } from './namingService';
import { NamingServiceSource, NamingServiceName, ResolutionResponse, nodeHash, Web3Provider } from './types';
/**
 * Class to support connection with Crypto naming service
 * @param network - network string such as
 * - mainnet
 * - ropsten
 * @param url - main api url such as
 * - https://mainnet.infura.io
 * @param registryAddress - address for a registry contract
 */
export default class Cns extends EthereumNamingService {
    readonly name = NamingServiceName.CNS;
    readonly network: string;
    readonly url: string;
    readonly registryAddress?: string;
    /**
     * Source object describing the network naming service operates on
     * @param source - if specified as a string will be used as main url, if omited then defaults are used
     * @throws ConfigurationError - when either network or url is setup incorrectly
     */
    constructor(source?: NamingServiceSource, web3Provider?: Web3Provider);
    /**
     * Checks if the domain is in valid format
     * @param domain - domain name to be checked
     * @returns
     */
    isSupportedDomain(domain: string): boolean;
    /**
     * Resolves the given domain.
     * @deprecated
     * @param domain - domain name to be resolved
     * @returns- Returns a promise that resolves in an object
     */
    resolve(domain: string): Promise<ResolutionResponse>;
    /**
     * Resolves domain to a specific cryptoAddress
     * @param domain - domain name to be resolved
     * @param currencyTicker currency ticker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     * @returns - A promise that resolves in a string
     */
    address(domain: string, currencyTicker: string): Promise<string>;
    /**
     * Produces CNS namehash
     * @param domain - domain to be hashed
     * @returns CNS namehash of a domain
     */
    namehash(domain: string): nodeHash;
    /**
     * Returns the childhash
     * @param parent - nodehash of a parent
     * @param label - child
     */
    childhash(parent: nodeHash, label: string, options?: {
        prefix: boolean;
    }): nodeHash;
    /**
     * resolves an ipfsHash stored on domain
     * @param domain - domain name
     */
    ipfsHash(domain: string): Promise<string>;
    /**
     * resolves an email address stored on domain
     * @param domain - domain name
     */
    email(domain: string): Promise<string>;
    /**
     * resolves an httpUrl stored on domain
     * @param domain - domain name
     */
    httpUrl(domain: string): Promise<string>;
    private getTtl;
    /** This is done to make testwriting easy */
    private getRecord;
}
