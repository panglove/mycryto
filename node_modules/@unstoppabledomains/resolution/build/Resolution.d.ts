import { Blockchain, ResolutionResponse, API, nodeHash, NamingServiceName, Web3Provider } from './types';
/**
 * Blockchain domain Resolution library - Resolution.
 * @example
 * ```
 * let Resolution = new Resolution({blockchain: {ens: {url: 'https://mainnet.infura.io', network: 'mainnet'}}});
 * let domain = brad.zil
 * let Resolution = Resolution.address(domain);
 * ```
 */
export default class Resolution {
    readonly blockchain: Blockchain | boolean;
    readonly web3Provider?: Web3Provider;
    /**
     * Resolution constructor
     * @property blockchain - main configuration object
     */
    constructor({ blockchain, api, }?: {
        blockchain?: Blockchain;
        api?: API;
    });
    /**
     * Creates a resolution with configured infura id for ens and cns
     * @param infura infura project id
     */
    static infura(infura: string): Resolution;
    /**
     * Creates a resolution instance with configured provider
     * @param provider - any provider with sendAsync function impelmented
     */
    static provider(provider: Web3Provider): Resolution;
    /**
     * Creates a resolution instance from configured jsonRPCProvider
     * @param provider - any jsonRPCprovider will work as long as it's prototype has send(method, params): Promise<any> method
     */
    static jsonRPCprovider(provider: any): Resolution;
    /**
     * Resolves the given domain
     * @async
     * @param domain - domain name to be resolved
     * @returns A promise that resolves in an object
     */
    resolve(domain: string): Promise<ResolutionResponse>;
    /**
     * Resolves give domain name to a specific currency address if exists
     * @async
     * @param domain - domain name to be resolved
     * @param currencyTicker - currency ticker like BTC, ETH, ZIL
     * @returns A promise that resolves in an address or null
     */
    address(domain: string, currencyTicker: string): Promise<string | null>;
    /**
     * Resolves the IPFS hash configured for domain records on ZNS
     * @param domain - domain name
     * @throws ResolutionError
     */
    ipfsHash(domain: string): Promise<string>;
    /**
     * Resolves the httpUrl attached to domain
     * @param domain - domain name
     */
    httpUrl(domain: string): Promise<string>;
    /**
     * Resolves the ipfs redirect url for a supported domain records
     * @deprecated - use Resolution#httpUrl instead
     * @param domain - domain name
     * @throws ResolutionError
     * @returns A Promise that resolves in redirect url
     */
    ipfsRedirect(domain: string): Promise<string>;
    /**
     * Resolves the ipfs email field from whois configurations
     * @param domain - domain name
     * @throws ResolutionError
     * @returns A Promise that resolves in an email address configured for this domain whois
     */
    email(domain: string): Promise<string>;
    /**
     * Resolves given domain to a specific currency address or throws an error
     * @param domain - domain name
     * @param currencyTicker - currency ticker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     * @throws ResolutionError if address is not found
     */
    addressOrThrow(domain: string, currencyTicker: string): Promise<string>;
    resolver(domain: string): Promise<string>;
    /**
     * Owner of the domain
     * @param domain - domain name
     * @returns An owner address of the domain
     */
    owner(domain: string): Promise<string | null>;
    /**
     * This method is only for ens at the moment. Reverse the ens address to a ens registered domain name
     * @async
     * @param address - address you wish to reverse
     * @param currencyTicker - currency ticker like BTC, ETH, ZIL
     * @returns Domain name attached to this address
     */
    reverse(address: string, currencyTicker: string): Promise<string | null>;
    /**
     * Produce a namehash from supported naming service
     * @param domain - domain name to be hashed
     * @returns Namehash either for ENS or ZNS
     * @throws ResolutionError with UnsupportedDomain error code if domain extension is unknown
     */
    namehash(domain: string): string;
    /**
     * returns a childhash for specific namingService
     * @param parent -> hash for parent
     * @param label -> hash for label
     * @param method -> "ENS", "CNS" or "ZNS"
     */
    childhash(parent: nodeHash, label: string, method: NamingServiceName): nodeHash | null;
    /**
     * Checks weather the domain name matches the hash
     * @param domain - domain name to check againt
     * @param hash - hash obtained from the blockchain
     */
    isValidHash(domain: string, hash: string): boolean;
    /**
     * Checks if the domain is in valid format
     * @param domain - domain name to be checked
     */
    isSupportedDomain(domain: string): boolean;
    /**
     * Checks if the domain is supported by the specified network as well as if it is in valid format
     * @param domain - domain name to be checked
     */
    isSupportedDomainInNetwork(domain: string): boolean;
    serviceName(domain: string): NamingServiceName;
    /**
     * Used internally to get the right method (ens or zns)
     * @param domain - domain name
     */
    private getNamingMethod;
    private getNamingMethodOrThrow;
    private checkIfSet;
    private prepareDomain;
}
export { Resolution };
