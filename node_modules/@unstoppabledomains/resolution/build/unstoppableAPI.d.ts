import NamingService from './namingService';
import { ResolutionResponse, NamingServiceName } from './types';
export default class Udapi extends NamingService {
    readonly name = "UDAPI";
    private url;
    private headers;
    constructor(url: string);
    /**
     * Resolves the domain via UD API mirror
     * @param domain - domain name to be resolved
     * @param currencyTicker - currencyTicker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     */
    address(domain: string, currencyTicker: string): Promise<string>;
    /**
     * Owner of the domain
     * @param domain - domain name
     * @returns An owner address of the domain
     */
    owner(domain: string): Promise<string | null>;
    /**
     * Resolves ipfshash from domain
     * @param domain - domain name
     * @throws ResolutionError.RecordNotFound if not found
     */
    ipfsHash(domain: string): Promise<string>;
    /**
     * Resolves email from domain
     * @param domain - domain name
     * @throws ResolutionError.RecordNotFound if not found
     */
    email(domain: string): Promise<string>;
    /**
     * Resolves httpUrl from domain
     * @param domain - domain name
     * @throws ResolutionError.RecordNotFound if not found
     */
    httpUrl(domain: string): Promise<string>;
    /**
     * Resolves the domain name via UD API mirror
     * @param domain - domain name to be resolved
     */
    resolve(domain: string): Promise<ResolutionResponse>;
    /**
     * Returns naming service name
     * @param domain - domain name
     */
    serviceName(domain: string): NamingServiceName;
    /**
     * Not implemented for this naming service
     * @param domain
     */
    resolver(domain: string): Promise<string>;
    private findMethod;
    private findMethodOrThrow;
    /**
     * Looks up for an arbitrary key inside the records of certain domain
     * @param domain - domain name
     * @param key - key to look for
     */
    record(domain: string, key: string): Promise<string>;
}
