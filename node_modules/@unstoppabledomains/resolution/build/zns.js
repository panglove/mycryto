"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./zns/utils");
var namehash_1 = __importStar(require("./zns/namehash"));
var utils_2 = require("./utils");
var types_1 = require("./types");
var index_1 = require("./index");
var namingService_1 = __importDefault(require("./namingService"));
var DefaultSource = 'https://api.zilliqa.com';
var NetworkIdMap = {
    1: 'mainnet',
    333: 'testnet',
    111: 'localnet',
};
var RegistryMap = {
    mainnet: 'zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz',
};
var UrlMap = {
    mainnet: 'https://api.zilliqa.com',
    testnet: 'https://dev-api.zilliqa.com',
    localnet: 'http://localhost:4201',
};
var UrlNetworkMap = function (url) { return utils_2.invert(UrlMap)[url]; };
/**
 * Class to support connection with Zilliqa naming service
 * @param network - network string such as
 * - mainnet
 * - ropsten
 * @param url - main api url such as
 * - https://mainnet.infura.io
 * @param registryAddress - address for a registry contract
 */
var Zns = /** @class */ (function (_super) {
    __extends(Zns, _super);
    /**
     * Source object describing the network naming service operates on
     * @param source - if specified as a string will be used as main url, if omitted then defaults are used
     * @throws ConfigurationError - when either network or url is setup incorrectly
     */
    function Zns(source) {
        if (source === void 0) { source = true; }
        var _this = _super.call(this) || this;
        _this.name = types_1.NamingServiceName.ZNS;
        source = _this.normalizeSource(source);
        _this.network = source.network;
        _this.url = source.url;
        if (!_this.network) {
            throw new Error('Unspecified network in Resolution ZNS configuration');
        }
        if (!_this.url) {
            throw new Error('Unspecified url in Resolution ZNS configuration');
        }
        _this.registryAddress = source.registry
            ? source.registry
            : RegistryMap[_this.network];
        if (_this.registryAddress) {
            _this.registryAddress = _this.registryAddress.startsWith('0x')
                ? utils_1.toBech32Address(_this.registryAddress)
                : _this.registryAddress;
        }
        return _this;
    }
    /**
     * Resolves the domain name
     * @param domain - domain name to be resolved
     * @returns A promise that resolves in a detailed crypto Resolution
     */
    Zns.prototype.resolve = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordAddresses, ownerAddress, resolverAddress, resolution, _a, addresses;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getRecordsAddresses(domain)];
                    case 1:
                        recordAddresses = _b.sent();
                        if (!recordAddresses)
                            return [2 /*return*/, types_1.UnclaimedDomainResponse];
                        ownerAddress = recordAddresses[0], resolverAddress = recordAddresses[1];
                        _a = this.structureResolverRecords;
                        return [4 /*yield*/, this.getResolverRecords(resolverAddress)];
                    case 2:
                        resolution = _a.apply(this, [_b.sent()]);
                        addresses = {};
                        if (resolution.crypto)
                            Object.entries(resolution.crypto).map(function (_a) {
                                var key = _a[0], v = _a[1];
                                return v.address && (addresses[key] = v.address);
                            });
                        return [2 /*return*/, {
                                addresses: addresses,
                                meta: {
                                    owner: ownerAddress || null,
                                    type: this.name,
                                    ttl: parseInt(resolution.ttl) || 0,
                                },
                            }];
                }
            });
        });
    };
    /**
     * Resolves domain name to a particular crypto address associated with it
     * @param domain - domain name to be resolved
     * @param currencyTicker - specific currency ticker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     * @returns A promise that resolves in a string
     * @throws ResolutionError
     */
    Zns.prototype.address = function (domain, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var data, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        data = _a.sent();
                        if ((data && !data.meta.owner) || types_1.isNullAddress(data.meta.owner))
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        address = data.addresses[currencyTicker.toUpperCase()];
                        if (!address)
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnspecifiedCurrency, {
                                domain: domain,
                                currencyTicker: currencyTicker,
                            });
                        return [2 /*return*/, address];
                }
            });
        });
    };
    /**
     * Owner of the domain
     * @param domain - domain name
     * @returns An owner address of the domain
     */
    Zns.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolve(domain)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data ? data.meta.owner : null];
                }
            });
        });
    };
    /**
     * Resolves a domain
     * @param domain - domain name to be resolved
     * @returns Everything what is stored on specified domain
     */
    Zns.prototype.Resolution = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.structureResolverRecords;
                        return [4 /*yield*/, this.records(domain)];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            });
        });
    };
    Zns.prototype.ipfsHash = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordOrThrow(domain, 'ipfs.html.value')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Zns.prototype.httpUrl = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordOrThrow(domain, 'ipfs.redirect_domain.value')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Zns.prototype.email = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordOrThrow(domain, 'whois.email.value')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Resolves a specific field from domain's record
     * @param domain - domain name
     * @param field - resolver record name to be queried
     * @returns Record field associated with the domain
     */
    Zns.prototype.record = function (domain, field) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordOrThrow(domain, field)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Resolver Records
     * @param domain - domain name to be resolved
     * @returns ZNS resolver records in an plain key-value format
     */
    Zns.prototype.records = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.getResolverRecords;
                        return [4 /*yield*/, this.resolverAddress(domain)];
                    case 1: return [4 /*yield*/, _a.apply(this, [(_b.sent())])];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /**
     * Checks if domain is supported by zns
     */
    Zns.prototype.isSupportedDomain = function (domain) {
        var tokens = domain.split('.');
        return (!!tokens.length &&
            tokens[tokens.length - 1] === 'zil' &&
            tokens.every(function (v) { return !!v.length; }));
    };
    /**
     * Checks if zns is supported by current Resolution instance
     */
    Zns.prototype.isSupportedNetwork = function () {
        return this.registryAddress != null;
    };
    /**
     * Produces ZNS namehash of a domain
     * @param domain - domain name to be hashed
     * @returns ZNS namehash
     */
    Zns.prototype.namehash = function (domain) {
        this.ensureSupportedDomain(domain);
        return namehash_1.default(domain);
    };
    /**
     * Returns the childhash
     * @param parent - nodehash of a parent
     * @param label - child
     */
    Zns.prototype.childhash = function (parent, label) {
        return namehash_1.childhash(parent, label);
    };
    /**
     * get the resolver address from domain
     * @param domain - domain name
     * @throws ResolutionError with codes
     *  - UnregisteredDomain if there is no owner for such a domain
     *  - UnspecifiedResolver if there is no resolver for such a domain
     */
    Zns.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordsAddresses, _, resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordsAddresses(domain)];
                    case 1:
                        recordsAddresses = _a.sent();
                        if (!recordsAddresses || !recordsAddresses[0])
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        _ = recordsAddresses[0], resolverAddress = recordsAddresses[1];
                        if (!resolverAddress || types_1.isNullAddress(resolverAddress))
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.UnspecifiedResolver, {
                                domain: domain,
                            });
                        return [2 /*return*/, resolverAddress];
                }
            });
        });
    };
    /** @internal */
    Zns.prototype.normalizeSource = function (source) {
        switch (typeof source) {
            case 'boolean': {
                return { url: DefaultSource, network: 'mainnet' };
            }
            case 'string': {
                return {
                    url: source,
                    network: UrlNetworkMap(source),
                };
            }
            case 'object': {
                source = __assign({}, source);
                if (typeof source.network == 'number') {
                    source.network = NetworkIdMap[source.network];
                }
                if (source.registry) {
                    source.network = source.network ? source.network : 'mainnet';
                    source.url = source.url ? source.url : DefaultSource;
                }
                if (source.network && !source.url) {
                    source.url = UrlMap[source.network];
                }
                if (source.url && !source.network) {
                    source.network = UrlNetworkMap(source.url);
                }
                return source;
            }
        }
    };
    Zns.prototype.getRecordOrThrow = function (domain, field) {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.records(domain)];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, this.getRecordFieldOrThrow(domain, records, field)];
                }
            });
        });
    };
    Zns.prototype.getRecordFieldOrThrow = function (domain, records, field) {
        if (!records || !records[field])
            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.RecordNotFound, {
                domain: domain,
                recordName: field,
            });
        return records[field];
    };
    Zns.prototype.getRecordsAddresses = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var registryRecord, _a, ownerAddress, resolverAddress;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isSupportedDomain(domain) || !this.isSupportedNetwork())
                            return [2 /*return*/, undefined];
                        return [4 /*yield*/, this.getContractMapValue(this.registryAddress, 'records', namehash_1.default(domain))];
                    case 1:
                        registryRecord = _b.sent();
                        if (!registryRecord)
                            return [2 /*return*/, undefined];
                        _a = registryRecord.arguments, ownerAddress = _a[0], resolverAddress = _a[1];
                        if (ownerAddress.startsWith('0x')) {
                            ownerAddress = utils_1.toBech32Address(ownerAddress);
                        }
                        return [2 /*return*/, [ownerAddress, resolverAddress]];
                }
            });
        });
    };
    Zns.prototype.getResolverRecords = function (resolverAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!resolverAddress || types_1.isNullAddress(resolverAddress)) {
                            return [2 /*return*/, {}];
                        }
                        resolver = utils_1.toChecksumAddress(resolverAddress);
                        return [4 /*yield*/, this.getContractField(resolver, 'records')];
                    case 1: return [2 /*return*/, ((_a.sent()) ||
                            {})];
                }
            });
        });
    };
    Zns.prototype.structureResolverRecords = function (records) {
        var result = {};
        for (var _i = 0, _a = Object.entries(records); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            utils_2.set(result, key, value);
        }
        return result;
    };
    Zns.prototype.resolverAddress = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordsAddresses(domain)];
                    case 1: return [2 /*return*/, ((_a.sent()) || [])[1]];
                }
            });
        });
    };
    Zns.prototype.fetchSubState = function (contractAddress, field, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(this.url, {
                            method: 'POST',
                            body: JSON.stringify({
                                id: '1',
                                jsonrpc: '2.0',
                                method: 'GetSmartContractSubState',
                                params: [contractAddress.replace('0x', ''), field, keys],
                            }),
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        }).then(function (res) { return res.json(); })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.result];
                }
            });
        });
    };
    Zns.prototype.getContractField = function (contractAddress, field, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var contractAddr, result, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        contractAddr = contractAddress.startsWith('zil1')
                            ? utils_1.fromBech32Address(contractAddress)
                            : contractAddress;
                        return [4 /*yield*/, this.fetchSubState(contractAddr, field, keys)];
                    case 1:
                        result = (_a.sent()) || {};
                        return [2 /*return*/, result[field]];
                    case 2:
                        err_1 = _a.sent();
                        if (err_1.name == 'FetchError')
                            throw new index_1.ResolutionError(index_1.ResolutionErrorCode.NamingServiceDown, {
                                method: types_1.NamingServiceName.ZNS,
                            });
                        else
                            throw err_1;
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Zns.prototype.getContractMapValue = function (contractAddress, field, key) {
        return __awaiter(this, void 0, void 0, function () {
            var record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContractField(contractAddress, field, [key])];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record && record[key]) || null];
                }
            });
        });
    };
    return Zns;
}(namingService_1.default));
exports.default = Zns;
