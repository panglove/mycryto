"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var nock_1 = __importDefault(require("nock"));
var index_1 = require("../index");
var mockData_json_1 = __importDefault(require("../testData/mockData.json"));
exports.MainnetUrl = 'https://mainnet.infura.io';
exports.ZilliqaUrl = 'https://api.zilliqa.com';
exports.DefaultUrl = 'https://unstoppabledomains.com/api/v1';
function mockAsyncMethod(object, method, value) {
    var spy = jest.spyOn(object, method);
    if (!process.env.LIVE) {
        if (value instanceof Error) {
            return spy.mockRejectedValue(value);
        }
        else {
            return spy.mockResolvedValue(value);
        }
    }
    return spy;
}
exports.mockAsyncMethod = mockAsyncMethod;
function mockAsyncMethods(object, methods) {
    return Object.entries(methods).map(function (method) {
        return mockAsyncMethod(object, method[0], method[1]);
    });
}
exports.mockAsyncMethods = mockAsyncMethods;
function expectSpyToBeCalled(spies) {
    if (!process.env.LIVE) {
        spies.forEach(function (spy) { return expect(spy).toBeCalled(); });
    }
}
exports.expectSpyToBeCalled = expectSpyToBeCalled;
function expectResolutionErrorCode(callback, code) {
    return __awaiter(this, void 0, void 0, function () {
        var error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    if (!(callback instanceof Promise)) return [3 /*break*/, 2];
                    return [4 /*yield*/, callback];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    callback();
                    _a.label = 3;
                case 3: return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    if (error_1 instanceof index_1.ResolutionError) {
                        return [2 /*return*/, expect(error_1.code).toEqual(code)];
                    }
                    else {
                        throw error_1;
                    }
                    return [3 /*break*/, 5];
                case 5:
                    fail("Expected resolution error to be thrown but wasn't");
                    return [2 /*return*/];
            }
        });
    });
}
exports.expectResolutionErrorCode = expectResolutionErrorCode;
function mockAPICalls(testName, url) {
    if (url === void 0) { url = exports.MainnetUrl; }
    if (process.env.LIVE) {
        return;
    }
    var mcdt = mockData_json_1.default;
    var mockCall = mcdt[testName];
    mockCall.forEach(function (_a) {
        var METHOD = _a.METHOD, REQUEST = _a.REQUEST, RESPONSE = _a.RESPONSE;
        switch (METHOD) {
            case 'POST': {
                nock_1.default(url)
                    // .log()
                    .post('/', JSON.stringify(REQUEST))
                    .reply(200, JSON.stringify(RESPONSE));
            }
            default: {
                nock_1.default(url)
                    // .log()
                    .get(REQUEST)
                    .reply(200, RESPONSE);
            }
        }
    });
}
exports.mockAPICalls = mockAPICalls;
/**
 * @internal
 * returns either a standard mainnet infura url
 * or the one with attached INFURA SECRET key from
 * UNSTOPPABLE_RESOLUTION_INFURA_PROJECTID env variable if any
 */
function secretInfuraLink() {
    var secret = process.env.UNSTOPPABLE_RESOLUTION_INFURA_PROJECTID;
    var url = 'https://mainnet.infura.io';
    if (secret)
        url = "https://mainnet.infura.io/v3/" + secret;
    return url;
}
exports.secretInfuraLink = secretInfuraLink;
