"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var nock_1 = __importDefault(require("nock"));
var index_1 = __importStar(require("./index"));
var testHelpers_1 = require("./utils/testHelpers");
beforeEach(function () {
    nock_1.default.cleanAll();
    jest.restoreAllMocks();
});
describe('Unstoppable API', function () {
    it('resolves a domain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    testHelpers_1.mockAPICalls('ud_api_generic_test', testHelpers_1.DefaultUrl);
                    resolution = new index_1.default({ blockchain: false });
                    return [4 /*yield*/, resolution.address('cofounding.zil', 'eth')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual('0xaa91734f90795e80751c96e682a321bb3c1a4186');
                    return [2 /*return*/];
            }
        });
    }); });
    it('namehashes zil domain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({ blockchain: false });
            expect(resolution.namehash('cofounding.zil')).toEqual('0x1cc365ffd60bb50538e01d24c1f1e26c887c36f26a0de250660b8a1465c60667');
            return [2 /*return*/];
        });
    }); });
    it('supports zil and eth domains', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution;
        return __generator(this, function (_a) {
            resolution = new index_1.default({ blockchain: false });
            expect(resolution.isSupportedDomain('cofounding.zil')).toEqual(true);
            expect(resolution.isSupportedDomain('cofounding.eth')).toEqual(true);
            expect(resolution.isSupportedDomain('cofounding.unknown')).toEqual(false);
            return [2 /*return*/];
        });
    }); });
    it('throws NamingServiceDown on FetchError', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolution = new index_1.default({ blockchain: false });
                    error = new Error();
                    error.name = 'FetchError';
                    jest.spyOn(resolution.api, 'fetch').mockRejectedValue(error);
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.resolve('hello.zil'), index_1.ResolutionErrorCode.NamingServiceDown)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns owner of the domain', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    resolution = new index_1.default({ blockchain: false });
                    testHelpers_1.mockAPICalls('ud_api_generic_test', testHelpers_1.DefaultUrl);
                    _a = expect;
                    return [4 /*yield*/, resolution.owner('cofounding.zil')];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual('zil1ye72zl5t8wl5n3f2fsa5w0x7hja0jqj7mhct23');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return a valid ipfsHash from API', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, eyes, ipfsHash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolution = new index_1.default({ blockchain: false });
                    eyes = testHelpers_1.mockAsyncMethod(resolution.api, 'resolve', {
                        addresses: {
                            BCH: 'qrq4sk49ayvepqz7j7ep8x4km2qp8lauvcnzhveyu6',
                            BTC: '1EVt92qQnaLDcmVFtHivRJaunG2mf2C3mB',
                            DASH: 'XnixreEBqFuSLnDSLNbfqMH1GsZk7cgW4j',
                            ETH: '0x45b31e01AA6f42F0549aD482BE81635ED3149abb',
                            LTC: 'LetmswTW3b7dgJ46mXuiXMUY17XbK29UmL',
                            XMR: '447d7TVFkoQ57k3jm3wGKoEAkfEym59mK96Xw5yWamDNFGaLKW5wL2qK5RMTDKGSvYfQYVN7dLSrLdkwtKH3hwbSCQCu26d',
                            ZEC: 't1h7ttmQvWCSH1wfrcmvT4mZJfGw2DgCSqV',
                            ZIL: 'zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj',
                        },
                        whois: {},
                        ipfs: {
                            html: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK',
                            redirect_domain: 'www.unstoppabledomains.com',
                        },
                        meta: {
                            owner: '0x2d418942dce1afa02d0733a2000c71b371a6ac07',
                            type: 'ZNS',
                            ttl: 0,
                        },
                    });
                    return [4 /*yield*/, resolution.ipfsHash('brad.zil')];
                case 1:
                    ipfsHash = _a.sent();
                    testHelpers_1.expectSpyToBeCalled([eyes]);
                    expect(ipfsHash).toBe('QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return a valid email from API', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, eyes, email;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolution = new index_1.default({ blockchain: false });
                    eyes = testHelpers_1.mockAsyncMethod(resolution.api, 'resolve', {
                        addresses: {},
                        whois: {
                            email: 'matt+test@unstoppabledomains.com',
                            for_sale: 'true',
                        },
                        ipfs: {
                            html: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHu',
                            redirect_domain: 'www.unstoppabledomains.com',
                        },
                        meta: {
                            owner: '0x4e984952e867ff132cd4b70cd3f313d68c511b76',
                            type: 'ZNS',
                            ttl: 0,
                        },
                    });
                    return [4 /*yield*/, resolution.email('ergergergerg.zil')];
                case 1:
                    email = _a.sent();
                    testHelpers_1.expectSpyToBeCalled([eyes]);
                    expect(email).toBe('matt+test@unstoppabledomains.com');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return a valid httpUrl from API', function () { return __awaiter(void 0, void 0, void 0, function () {
        var resolution, eyes, httpUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolution = new index_1.default({ blockchain: false });
                    eyes = testHelpers_1.mockAsyncMethod(resolution.api, 'resolve', {
                        addresses: {
                            BCH: 'qrq4sk49ayvepqz7j7ep8x4km2qp8lauvcnzhveyu6',
                            BTC: '1EVt92qQnaLDcmVFtHivRJaunG2mf2C3mB',
                            DASH: 'XnixreEBqFuSLnDSLNbfqMH1GsZk7cgW4j',
                            ETH: '0x45b31e01AA6f42F0549aD482BE81635ED3149abb',
                            LTC: 'LetmswTW3b7dgJ46mXuiXMUY17XbK29UmL',
                            XMR: '447d7TVFkoQ57k3jm3wGKoEAkfEym59mK96Xw5yWamDNFGaLKW5wL2qK5RMTDKGSvYfQYVN7dLSrLdkwtKH3hwbSCQCu26d',
                            ZEC: 't1h7ttmQvWCSH1wfrcmvT4mZJfGw2DgCSqV',
                            ZIL: 'zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj',
                        },
                        whois: {},
                        ipfs: {
                            html: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK',
                            redirect_domain: 'www.unstoppabledomains.com',
                        },
                        meta: {
                            owner: '0x2d418942dce1afa02d0733a2000c71b371a6ac07',
                            type: 'ZNS',
                            ttl: 0,
                        },
                    });
                    return [4 /*yield*/, resolution.httpUrl('brad.zil')];
                case 1:
                    httpUrl = _a.sent();
                    testHelpers_1.expectSpyToBeCalled([eyes]);
                    expect(httpUrl).toBe('www.unstoppabledomains.com');
                    return [2 /*return*/];
            }
        });
    }); });
});
