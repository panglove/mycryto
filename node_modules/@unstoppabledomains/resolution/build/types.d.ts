export declare type Dictionary<T> = {
    [k: string]: T;
};
/**
 * SourceDefinition object
 * @typedef {Object} SourceDefinition
 * @property {string} [url] - main blockchain api url
 * @property {string | number} [network] - blockchain network
 */
export interface SourceDefinition {
    url?: string;
    network?: string | number;
    registry?: string;
}
/**
 * NamingServiceSource
 * just an alias
 * @typedef {string | boolean | SourceDefinition}
 */
export declare type NamingServiceSource = string | boolean | SourceDefinition;
export declare enum NamingServiceName {
    ENS = "ENS",
    CNS = "CNS",
    ZNS = "ZNS"
}
export declare type ResolutionMethod = NamingServiceName | 'UDAPI';
/**
 * EnsNetworkIdMap
 * type represending the map between network number and network name
 * @typedef
 */
export declare type EnsNetworkIdMap = {
    [key: number]: string;
};
/**
 * BlockcahinNetworkUrlMap
 * type representing a map between network name such as
 *  - mainnet
 *  - ropsten
 * and a corresponding url
 * @typede
 */
export interface BlockhanNetworkUrlMap {
    [key: string]: string;
}
/**
 * RegistryMap
 * type represending the map between network name and registry address for specific NamingService
 */
export interface RegistryMap {
    [key: string]: string;
}
/**
 * ResolutionResulution
 * @typedef ResolutionResponse
 * @property {Object} addresses - Resolution addresses for various currency addresses attached to the domain
 * @property {Object} meta - meta information about the owner of the domain
 */
export declare type ResolutionResponse = {
    ipfs?: {
        html?: string;
        redirect_domain?: string;
    };
    whois?: {
        email?: string;
        for_sale?: boolean;
    };
    addresses: {
        [key: string]: string;
    };
    meta: {
        owner: string | null;
        type: string;
        ttl: number;
    };
};
export declare const UDApiDefaultUrl = "https://unstoppabledomains.com/api/v1";
/**
 * Main configurational object for Resolution instance
 */
export declare type Blockchain = boolean | {
    ens?: NamingServiceSource;
    zns?: NamingServiceSource;
    cns?: NamingServiceSource;
    web3Provider?: Web3Provider;
};
export declare type API = {
    url: string;
};
export interface Web3Provider {
    sendAsync: (method: string, params: any) => Promise<any>;
}
export declare const DefaultAPI: API;
/**
 * Default structure of ZnsResolution records
 * @typedef {object} ZnsResolution
 */
export declare type ZnsResolution = {
    crypto?: Dictionary<{
        address?: string;
        [key: string]: any;
    }>;
    ttl?: string;
    [key: string]: any;
};
export declare type Bip44Constants = [number, string, string];
export declare type owner = string;
export declare type ttl = string;
export declare type nodeHash = string;
export declare enum NullAddress {
    '0x' = 0,
    '0x0000000000000000000000000000000000000000' = 1,
    '0x0000000000000000000000000000000000000000000000000000000000000000' = 2
}
export declare function isNullAddress(key: string | null): boolean;
export declare const EthCoinIndex = 60;
export declare const UnclaimedDomainResponse: ResolutionResponse;
/**
 * @deprecated Use UnclaimedDomainResponse instead (deprecated since 0.3.4)
 */
export declare const UNCLAIMED_DOMAIN_RESPONSE: ResolutionResponse;
