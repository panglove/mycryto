"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var resolutionError_1 = __importStar(require("./resolutionError"));
var baseConnection_1 = __importDefault(require("./baseConnection"));
var utils_1 = require("./utils");
var contract_1 = __importDefault(require("./utils/contract"));
/**
 * Abstract class for different Naming Service supports like
 * - ENS
 * - ZNS
 *
 */
var NamingService = /** @class */ (function (_super) {
    __extends(NamingService, _super);
    function NamingService(web3Provider) {
        var _this = _super.call(this) || this;
        _this.web3Provider = web3Provider;
        return _this;
    }
    NamingService.prototype.serviceName = function (domain) {
        return this.name;
    };
    NamingService.prototype.ensureSupportedDomain = function (domain) {
        if (!this.isSupportedDomain(domain)) {
            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        }
    };
    /* @internal */
    NamingService.prototype.ignoreResolutionError = function (code, promise) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, promise];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        if (this.isResolutionError(error_1, code)) {
                            return [2 /*return*/, undefined];
                        }
                        else {
                            throw error_1;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /* @internal */
    NamingService.prototype.isResolutionError = function (error, code) {
        return error instanceof resolutionError_1.default && (!code || error.code === code);
    };
    return NamingService;
}(baseConnection_1.default));
exports.default = NamingService;
var EthereumNamingService = /** @class */ (function (_super) {
    __extends(EthereumNamingService, _super);
    function EthereumNamingService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** @internal */
        _this.NetworkIdMap = {
            1: 'mainnet',
            3: 'ropsten',
            4: 'kovan',
            42: 'rinkeby',
            5: 'goerli',
        };
        _this.UrlMap = {
            mainnet: 'https://mainnet.infura.io',
            ropsten: 'https://ropsten.infura.io',
            kovan: 'https://kovan.infura.io',
            rinkeby: 'https://rinkeby.infura.io',
            goerli: 'https://goerli.infura.io',
        };
        _this.NetworkNameMap = utils_1.invert(_this.NetworkIdMap);
        return _this;
    }
    /**
     * Returns the resolver address of a domain if exists
     * @param domain - domain name
     * @throws ResolutionError with codes UnregisteredDomain or UnspecifiedResolver
     */
    EthereumNamingService.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeHash, ownerPromise, resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nodeHash = this.namehash(domain);
                        ownerPromise = this.owner(domain);
                        return [4 /*yield*/, this.getResolver(nodeHash)];
                    case 1:
                        resolverAddress = _a.sent();
                        if (!(!resolverAddress || types_1.isNullAddress(resolverAddress))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.throwOwnershipError(domain, ownerPromise)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, resolverAddress];
                }
            });
        });
    };
    /**
     * Look up for network from url provided
     * @param url - main api url for blockchain
     * @returns Network such as:
     *  - mainnet
     *  - testnet
     */
    EthereumNamingService.prototype.networkFromUrl = function (url) {
        for (var key in this.NetworkNameMap) {
            if (!this.NetworkNameMap.hasOwnProperty(key))
                continue;
            if (url.indexOf(key) >= 0)
                return key;
        }
    };
    /**
     * Normalizes the source object based on type
     * @internal
     * @param source
     * @returns
     */
    EthereumNamingService.prototype.normalizeSource = function (source) {
        switch (typeof source) {
            case 'boolean': {
                return {
                    url: this.UrlMap['mainnet'],
                    network: this.networkFromUrl(this.UrlMap['mainnet']),
                };
            }
            case 'string': {
                return {
                    url: source,
                    network: this.networkFromUrl(source),
                };
            }
            case 'object': {
                source = __assign({}, source);
                if (typeof source.network == 'number') {
                    source.network = this.NetworkIdMap[source.network];
                }
                if (source.registry) {
                    source.network = source.network ? source.network : 'mainnet';
                    source.url = source.url
                        ? source.url
                        : "https://" + source.network + ".infura.io";
                }
                if (source.network &&
                    !source.url &&
                    this.NetworkNameMap.hasOwnProperty(source.network)) {
                    source.url = "https://" + source.network + ".infura.io";
                }
                if (source.url && !source.network) {
                    source.network = this.networkFromUrl(source.url);
                }
                return source;
            }
        }
    };
    /**
     * Checks if the current network is supported
     * @returns
     */
    EthereumNamingService.prototype.isSupportedNetwork = function () {
        return this.registryAddress != null;
    };
    /**
     * Internal wrapper for ens method. Used to throw an error when ens is down
     *  @param method - method to be called
     *  @throws ResolutionError -> When blockchain is down
     */
    EthereumNamingService.prototype.callMethod = function (contract, methodname, params) {
        return __awaiter(this, void 0, void 0, function () {
            var error_2, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, contract.fetchMethod(methodname, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_2 = _a.sent();
                        message = error_2.message;
                        if (message.match(/Invalid JSON RPC response/) ||
                            message.match(/legacy access request rate exceeded/)) {
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.NamingServiceDown, {
                                method: this.name,
                            });
                        }
                        throw error_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    EthereumNamingService.prototype.buildContract = function (abi, address) {
        return new contract_1.default(this.name, this.url, abi, address, this.web3Provider);
    };
    EthereumNamingService.prototype.throwOwnershipError = function (domain, ownerPromise) {
        return __awaiter(this, void 0, void 0, function () {
            var owner, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!ownerPromise) return [3 /*break*/, 2];
                        return [4 /*yield*/, ownerPromise];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.owner(domain)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        owner = _a;
                        if (!owner || types_1.isNullAddress(owner))
                            throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        throw new resolutionError_1.default(resolutionError_1.ResolutionErrorCode.UnspecifiedResolver, {
                            domain: domain,
                        });
                }
            });
        });
    };
    return EthereumNamingService;
}(NamingService));
exports.EthereumNamingService = EthereumNamingService;
