"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Resolution_1 = __importDefault(require("../Resolution"));
var fs = __importStar(require("fs"));
function tryInfo(method, response, name) {
    return __awaiter(this, void 0, void 0, function () {
        var field, resolvedPromise, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    field = name;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, method()];
                case 2:
                    resolvedPromise = _a.sent();
                    response[field] = resolvedPromise;
                    return [2 /*return*/, true];
                case 3:
                    err_1 = _a.sent();
                    response[field] = err_1.code;
                    return [2 /*return*/, false];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.tryInfo = tryInfo;
function commaSeparatedList(value, dummyPrevious) {
    return value.split(',').map(function (v) { return v.toUpperCase(); });
}
exports.commaSeparatedList = commaSeparatedList;
function signedInfuraLink(key) {
    return "https://mainnet.infura.io/v3/" + key;
}
exports.signedInfuraLink = signedInfuraLink;
function getEtheriumUrl() {
    //try to get them from config files
    var configObject = getConfig();
    if (!configObject) {
        if (process.env.UNSTOPPABLE_RESOLUTION_INFURA_PROJECTID)
            return signedInfuraLink(process.env.UNSTOPPABLE_RESOLUTION_INFURA_PROJECTID);
        if (process.env.UNSTOPPABLE_RESOLUTION_URL)
            return process.env.UNSTOPPABLE_RESOLUTION_URL;
    }
    else {
        if (configObject.type === 'infura')
            return signedInfuraLink(configObject.value);
        if (configObject.type === 'url')
            return configObject.value;
    }
    throw new Error("Couldn't find any configurations\n\tUse -C to configurate the library");
}
exports.getEtheriumUrl = getEtheriumUrl;
function buildResolutionPackage() {
    return new Resolution_1.default({
        blockchain: {
            ens: getEtheriumUrl(),
            cns: getEtheriumUrl(),
        },
    });
}
exports.buildResolutionPackage = buildResolutionPackage;
function parseConfig(value) {
    var words = value.split(':');
    return { type: words[0], value: words.slice(1).join(':') };
}
exports.parseConfig = parseConfig;
function storeConfig(type, value) {
    fs.writeFile(process.env.HOME + "/.resolution", type + "=" + value, function () {
        return console.log(type + "=" + value + " record stored");
    });
}
exports.storeConfig = storeConfig;
function getConfig() {
    try {
        var config = fs
            .readFileSync(process.env.HOME + "/.resolution")
            .toString()
            .split('=');
        if (config[0] === 'infura' || config[0] === 'url')
            return { type: config[0], value: config[1] };
    }
    catch (err) {
        throw new Error('Resolution library is not configured. Please use resolution -C and configure it either with infura project id or node url for lookup. Resolution -h for more details');
    }
}
exports.getConfig = getConfig;
