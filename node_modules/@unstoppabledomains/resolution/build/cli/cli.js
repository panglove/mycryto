#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var package_json_1 = __importDefault(require("../package.json"));
var cli_helpers_js_1 = require("./cli-helpers.js");
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var options, _a, type, value, domain, resolution, response, commandTable, resolutionProcess;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                commander_1.default
                    .storeOptionsAsProperties(false)
                    .version(package_json_1.default.version)
                    .option('-c, --currencies <currencies>', 'comma separated list of currency tickers', cli_helpers_js_1.commaSeparatedList)
                    .option('-C, --config <option>', "option in format <key>:<value>\n\tkey can be either \"infura\" or \"url\"", cli_helpers_js_1.parseConfig)
                    .option('-s, --service', 'returns you a service name from the domain')
                    .option('-i, --ipfs', 'get IpfsHash')
                    .option('-r, --resolver', 'get resolver address')
                    .option('-e, --email', 'get email')
                    .option('-n, --namehash', "returns domain's namehash")
                    .option('-o, --owner', "returns domain's owner")
                    .option('-m, --meta', 'shortcut for all meta data options (-siren)')
                    .option('-d, --domain <domain>', 'domain you wish to resolve')
                    .description('resolution cli exports main usage of @unstoppabledomains/resolution library');
                commander_1.default.parse(process.argv);
                options = commander_1.default.opts();
                if (options.meta) {
                    options.service = true;
                    options.ipfs = true;
                    options.resolver = true;
                    options.email = true;
                    options.namehash = true;
                    options.owner = true;
                    delete options.meta;
                }
                if (options.config) {
                    _a = options.config, type = _a.type, value = _a.value;
                    if (type == 'infura' || type == 'url')
                        cli_helpers_js_1.storeConfig(type, value);
                    delete options.config;
                }
                if (!options.domain)
                    return [2 /*return*/];
                domain = options.domain;
                delete options.domain;
                resolution = cli_helpers_js_1.buildResolutionPackage();
                response = {};
                commandTable = {
                    ipfs: function () { return cli_helpers_js_1.tryInfo(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, resolution.ipfsHash(domain)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); }, response, 'ipfs'); },
                    email: function () { return cli_helpers_js_1.tryInfo(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, resolution.email(domain)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); }, response, 'email'); },
                    resolver: function () { return cli_helpers_js_1.tryInfo(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, resolution.resolver(domain)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); }, response, 'resolver'); },
                    service: function () { return cli_helpers_js_1.tryInfo(function () { return resolution.serviceName(domain); }, response, 'service'); },
                    namehash: function () { return cli_helpers_js_1.tryInfo(function () { return resolution.namehash(domain); }, response, 'namehash'); },
                    owner: function () { return cli_helpers_js_1.tryInfo(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, resolution.owner(domain)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); }, response, 'owner'); }
                };
                resolutionProcess = [];
                // Execute resolution for each currency
                if (options.currencies) {
                    options.currencies.forEach(function (currency) { return __awaiter(void 0, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            resolutionProcess.push(cli_helpers_js_1.tryInfo(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, resolution.addressOrThrow(domain, currency)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            }); }); }, response, currency));
                            return [2 /*return*/];
                        });
                    }); });
                    delete options.currencies;
                }
                // Execute the rest of options
                Object.keys(options).forEach(function (option) { return resolutionProcess.push(commandTable[option]()); });
                return [4 /*yield*/, Promise.all(resolutionProcess)];
            case 1:
                _b.sent();
                console.log(response);
                return [2 /*return*/];
        }
    });
}); })();
