"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = __importDefault(require("./index"));
var testHelpers_1 = require("./utils/testHelpers");
var resolutionError_1 = require("./resolutionError");
var types_1 = require("./types");
try {
    var dotenv = require('dotenv');
    dotenv.config();
}
catch (err) {
    console.warn('dotenv is not installed');
}
var labelDomain = 'reseller-test-braden-6.crypto';
var resolution;
beforeEach(function () {
    jest.restoreAllMocks();
    resolution = new index_1.default({
        blockchain: { cns: { url: testHelpers_1.secretInfuraLink() } },
    });
});
var mockCryptoCalls = function (object, mockAddress) {
    var eyes = testHelpers_1.mockAsyncMethods(object, {
        getResolver: '0xBD5F5ec7ed5f19b53726344540296C02584A5237',
        getRecord: mockAddress,
    });
    return eyes;
};
describe('CNS', function () {
    it('should define the default cns contract', function () {
        expect(resolution.cns).toBeDefined();
        expect(resolution.cns.network).toBe('mainnet');
        expect(resolution.cns.url).toBe(testHelpers_1.secretInfuraLink());
    });
    it('checks the IPFS hash record', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, ipfs_hash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.cns, {
                        getResolver: '0xBD5F5ec7ed5f19b53726344540296C02584A5237',
                        getRecord: 'QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK',
                    });
                    return [4 /*yield*/, resolution.cns.record(labelDomain, 'ipfs.html2')];
                case 1:
                    ipfs_hash = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(ipfs_hash).toBe('QmVaAtQbi3EtsfpKoLzALm6vXphdi2KjMgxEDKeGg6wHuK');
                    return [2 /*return*/];
            }
        });
    }); });
    it('Should return NoRecord Resolution error', function () { return __awaiter(void 0, void 0, void 0, function () {
        var spies;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spies = testHelpers_1.mockAsyncMethods(resolution.cns, {
                        getResolver: undefined,
                    });
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.cns.record(labelDomain, 'No.such.record'), resolutionError_1.ResolutionErrorCode.RecordNotFound)];
                case 1:
                    _a.sent();
                    testHelpers_1.expectSpyToBeCalled(spies);
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks the ipfs redirect_domain record', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, ipfs_redirect_domain;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = testHelpers_1.mockAsyncMethods(resolution.cns, {
                        getResolver: '0xBD5F5ec7ed5f19b53726344540296C02584A5237',
                        getRecord: 'www.unstoppabledomains.com',
                    });
                    return [4 /*yield*/, resolution.cns.record(labelDomain, 'ipfs.redirect_domain')];
                case 1:
                    ipfs_redirect_domain = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(ipfs_redirect_domain).toBe('www.unstoppabledomains.com');
                    return [2 /*return*/];
            }
        });
    }); });
    it('checks it from resolution main object', function () { return __awaiter(void 0, void 0, void 0, function () {
        var eyes, addr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    eyes = mockCryptoCalls(resolution.cns, 'zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj');
                    return [4 /*yield*/, resolution.address(labelDomain, 'ZIL')];
                case 1:
                    addr = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(eyes);
                    expect(addr).toBe('zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return a valid resolver address', function () { return __awaiter(void 0, void 0, void 0, function () {
        var spies, resolverAddress;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spies = testHelpers_1.mockAsyncMethods(resolution.cns, {
                        getResolver: '0xA1cAc442Be6673C49f8E74FFC7c4fD746f3cBD0D',
                    });
                    return [4 /*yield*/, resolution.cns.resolver('brad.crypto')];
                case 1:
                    resolverAddress = _a.sent();
                    testHelpers_1.expectSpyToBeCalled(spies);
                    expect(resolverAddress).toBe('0xA1cAc442Be6673C49f8E74FFC7c4fD746f3cBD0D');
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not find a resolver address', function () { return __awaiter(void 0, void 0, void 0, function () {
        var spies;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spies = testHelpers_1.mockAsyncMethods(resolution.cns, {
                        getResolver: undefined,
                        owner: types_1.NullAddress[1],
                    });
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.cns.resolver('empty.crypto'), resolutionError_1.ResolutionErrorCode.UnregisteredDomain)];
                case 1:
                    _a.sent();
                    testHelpers_1.expectSpyToBeCalled(spies);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw ResolutionError.UnspecifiedResolver', function () { return __awaiter(void 0, void 0, void 0, function () {
        var spies;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    spies = testHelpers_1.mockAsyncMethods(resolution.cns, {
                        getResolver: undefined,
                        owner: 'someowneraddress',
                    });
                    return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.cns.resolver('pandorapay.crypto'), resolutionError_1.ResolutionErrorCode.UnspecifiedResolver)];
                case 1:
                    _a.sent();
                    testHelpers_1.expectSpyToBeCalled(spies);
                    return [2 /*return*/];
            }
        });
    }); });
    describe('.Crypto', function () {
        it("checks the BCH address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, 'qrq4sk49ayvepqz7j7ep8x4km2qp8lauvcnzhveyu6');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'BCH')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('qrq4sk49ayvepqz7j7ep8x4km2qp8lauvcnzhveyu6');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the BTC address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, '1EVt92qQnaLDcmVFtHivRJaunG2mf2C3mB');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'BTC')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('1EVt92qQnaLDcmVFtHivRJaunG2mf2C3mB');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the DASH address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, 'XnixreEBqFuSLnDSLNbfqMH1GsZk7cgW4j');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'DASH')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('XnixreEBqFuSLnDSLNbfqMH1GsZk7cgW4j');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the ETH address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, '0x45b31e01AA6f42F0549aD482BE81635ED3149abb');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'ETH')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('0x45b31e01AA6f42F0549aD482BE81635ED3149abb');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the LTC address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, 'LetmswTW3b7dgJ46mXuiXMUY17XbK29UmL');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'LTC')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('LetmswTW3b7dgJ46mXuiXMUY17XbK29UmL');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the XMR address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, '447d7TVFkoQ57k3jm3wGKoEAkfEym59mK96Xw5yWamDNFGaLKW5wL2qK5RMTDKGSvYfQYVN7dLSrLdkwtKH3hwbSCQCu26d');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'XMR')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('447d7TVFkoQ57k3jm3wGKoEAkfEym59mK96Xw5yWamDNFGaLKW5wL2qK5RMTDKGSvYfQYVN7dLSrLdkwtKH3hwbSCQCu26d');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the ZEC address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, 't1h7ttmQvWCSH1wfrcmvT4mZJfGw2DgCSqV');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'ZEC')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('t1h7ttmQvWCSH1wfrcmvT4mZJfGw2DgCSqV');
                        return [2 /*return*/];
                }
            });
        }); });
        it("checks the ZIL address on " + labelDomain, function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = mockCryptoCalls(resolution.cns, 'zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj');
                        return [4 /*yield*/, resolution.cns.address(labelDomain, 'ZIL')];
                    case 1:
                        addr = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(addr).toBe('zil1yu5u4hegy9v3xgluweg4en54zm8f8auwxu0xxj');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.Hashing', function () {
        describe('.Namehash', function () {
            it('supports root node', function () { return __awaiter(void 0, void 0, void 0, function () {
                var cns;
                return __generator(this, function (_a) {
                    cns = resolution.cns;
                    expect(cns.isSupportedDomain('crypto')).toEqual(true);
                    expect(cns.namehash('crypto')).toEqual('0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f');
                    return [2 /*return*/];
                });
            }); });
            it('starts with -', function () { return __awaiter(void 0, void 0, void 0, function () {
                var cns;
                return __generator(this, function (_a) {
                    cns = resolution.cns;
                    expect(cns.isSupportedDomain('-hello.crypto')).toEqual(true);
                    expect(cns.namehash('-hello.crypto')).toBe('0xc4ad028bcae9b201104e15f872d3e85b182939b06829f75a128275177f2ff9b2');
                    return [2 /*return*/];
                });
            }); });
            it('ends with -', function () { return __awaiter(void 0, void 0, void 0, function () {
                var cns;
                return __generator(this, function (_a) {
                    cns = resolution.cns;
                    expect(cns.isSupportedDomain('hello-.crypto')).toEqual(true);
                    expect(cns.namehash('hello-.crypto')).toBe('0x82eaa6ef14e438940bfd7747e0e4c4fec42af20cee28ddd0a7d79f52b1c59b72');
                    return [2 /*return*/];
                });
            }); });
            it('starts and ends with -', function () { return __awaiter(void 0, void 0, void 0, function () {
                var cns;
                return __generator(this, function (_a) {
                    cns = resolution.cns;
                    expect(cns.isSupportedDomain('-hello-.crypto')).toEqual(true);
                    expect(cns.namehash('-hello-.crypto')).toBe('0x90cc1963ff09ce95ee2dbb3830df4f2115da9756e087a50283b3e65f6ffe2a4e');
                    return [2 /*return*/];
                });
            }); });
            it('should throw UnregisteredDomain', function () { return __awaiter(void 0, void 0, void 0, function () {
                var eyes;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            eyes = testHelpers_1.mockAsyncMethods(resolution.cns, {
                                getResolver: undefined,
                                owner: '0x0000000000000000000000000000000000000000'
                            });
                            return [4 /*yield*/, testHelpers_1.expectResolutionErrorCode(resolution.cns.address('unregistered.crypto', "ETH"), resolutionError_1.ResolutionErrorCode.UnregisteredDomain)];
                        case 1:
                            _a.sent();
                            testHelpers_1.expectSpyToBeCalled(eyes);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('.Childhash', function () {
            it('checks root crypto domain', function () {
                var cns = resolution.cns;
                var rootHash = '0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f';
                expect(cns.namehash('crypto')).toBe(rootHash);
                expect(cns.childhash('0000000000000000000000000000000000000000000000000000000000000000', 'crypto')).toBe(rootHash);
            });
            it('checks the childhash functionality', function () {
                var cns = resolution.cns;
                var domain = 'hello.world.crypto';
                var namehash = cns.namehash(domain);
                var childhash = cns.childhash(cns.namehash('world.crypto'), 'hello');
                expect(namehash).toBe(childhash);
            });
            it('checks childhash multi level domain', function () {
                var cns = resolution.cns;
                var domain = 'ich.ni.san.yon.hello.world.crypto';
                var namehash = cns.namehash(domain);
                var childhash = cns.childhash(cns.namehash('ni.san.yon.hello.world.crypto'), 'ich');
                expect(childhash).toBe(namehash);
            });
        });
    });
    describe('.Metadata', function () {
        var domain = 'reseller-test-ryan019.crypto';
        it('should resolve with ipfs stored on cns', function () { return __awaiter(void 0, void 0, void 0, function () {
            var spies, ipfsHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spies = testHelpers_1.mockAsyncMethods(resolution.cns, {
                            getResolver: undefined,
                            getRecord: '0x033dc48b5db4ca62861643e9d2c411d9eb6d1975@gmail.com',
                        });
                        return [4 /*yield*/, resolution.ipfsHash(domain)];
                    case 1:
                        ipfsHash = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(spies);
                        expect(ipfsHash).toBe('0x033dc48b5db4ca62861643e9d2c411d9eb6d1975@gmail.com');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should resolve with email stored on cns', function () { return __awaiter(void 0, void 0, void 0, function () {
            var spies, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spies = testHelpers_1.mockAsyncMethods(resolution.cns, {
                            getResolver: '0xA1cAc442Be6673C49f8E74FFC7c4fD746f3cBD0D',
                            getRecord: '0x033dc48b5db4ca62861643e9d2c411d9eb6d1975@gmail.com',
                        });
                        return [4 /*yield*/, resolution.email(domain)];
                    case 1:
                        email = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(spies);
                        expect(email).toBe('0x033dc48b5db4ca62861643e9d2c411d9eb6d1975@gmail.com');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should resolve with httpUrl stored on cns', function () { return __awaiter(void 0, void 0, void 0, function () {
            var eyes, httpUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eyes = testHelpers_1.mockAsyncMethods(resolution.cns, {
                            getResolver: '0xA1cAc442Be6673C49f8E74FFC7c4fD746f3cBD0D',
                            getRecord: '0x033dc48b5db4ca62861643e9d2c411d9eb6d1975@gmail.com',
                        });
                        return [4 /*yield*/, resolution.httpUrl(domain)];
                    case 1:
                        httpUrl = _a.sent();
                        testHelpers_1.expectSpyToBeCalled(eyes);
                        expect(httpUrl).toBe('0x033dc48b5db4ca62861643e9d2c411d9eb6d1975@gmail.com');
                        expect(resolution.namehash('crypto')).toEqual('0x0f4a10a4f46c288cea365fcf45cccf0e9d901b945b9829ccdb54c10dc3cb7a6f');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
