import { NamingServiceSource, ResolutionMethod, NamingServiceName, SourceDefinition, BlockhanNetworkUrlMap, ResolutionResponse, Web3Provider } from './types';
import BaseConnection from './baseConnection';
import Contract from './utils/contract';
/**
 * Abstract class for different Naming Service supports like
 * - ENS
 * - ZNS
 *
 */
export default abstract class NamingService extends BaseConnection {
    readonly name: ResolutionMethod;
    protected web3Provider?: Web3Provider;
    abstract isSupportedDomain(domain: string): boolean;
    abstract isSupportedNetwork(): boolean;
    abstract namehash(domain: string): string;
    abstract address(domain: string, currencyTicker: string): Promise<string>;
    abstract owner(domain: string): Promise<string | null>;
    abstract record(domain: string, key: string): Promise<string>;
    abstract resolve(domain: string): Promise<ResolutionResponse | null>;
    abstract ipfsHash(domain: string): Promise<string>;
    abstract email(domain: string): Promise<string>;
    abstract httpUrl(domain: string): Promise<string>;
    abstract resolver(domain: string): Promise<string>;
    constructor(web3Provider?: Web3Provider);
    serviceName(domain: string): NamingServiceName;
    protected abstract normalizeSource(source: NamingServiceSource): SourceDefinition;
    protected ensureSupportedDomain(domain: string): void;
}
export declare abstract class EthereumNamingService extends NamingService {
    readonly name: NamingServiceName;
    abstract registryAddress?: string;
    abstract url: string;
    protected abstract getResolver(id: string): Promise<string>;
    protected registryContract: Contract;
    readonly UrlMap: BlockhanNetworkUrlMap;
    readonly NetworkNameMap: {};
    /**
     * Returns the resolver address of a domain if exists
     * @param domain - domain name
     * @throws ResolutionError with codes UnregisteredDomain or UnspecifiedResolver
     */
    resolver(domain: string): Promise<string>;
    /**
     * Look up for network from url provided
     * @param url - main api url for blockchain
     * @returns Network such as:
     *  - mainnet
     *  - testnet
     */
    private networkFromUrl;
    /**
     * Checks if the current network is supported
     * @returns
     */
    isSupportedNetwork(): boolean;
    /**
     * Internal wrapper for ens method. Used to throw an error when ens is down
     *  @param method - method to be called
     *  @throws ResolutionError -> When blockchain is down
     */
    protected callMethod(contract: Contract, methodname: string, params: string[]): Promise<any>;
    protected buildContract(abi: any, address: any): Contract;
    protected throwOwnershipError(domain: any, ownerPromise?: Promise<string | null>): Promise<void>;
}
