"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var namingService_1 = require("./namingService");
var types_1 = require("./types");
var resolver_1 = __importDefault(require("./cns/contract/resolver"));
var registry_1 = __importDefault(require("./cns/contract/registry"));
var namehash_1 = __importStar(require("./cns/namehash"));
var resolutionError_1 = __importDefault(require("./resolutionError"));
var resolutionError_2 = require("./resolutionError");
/**
 * Class to support connection with Crypto naming service
 * @param network - network string such as
 * - mainnet
 * - ropsten
 * @param url - main api url such as
 * - https://mainnet.infura.io
 * @param registryAddress - address for a registry contract
 */
var Cns = /** @class */ (function (_super) {
    __extends(Cns, _super);
    /**
     * Source object describing the network naming service operates on
     * @param source - if specified as a string will be used as main url, if omited then defaults are used
     * @throws ConfigurationError - when either network or url is setup incorrectly
     */
    function Cns(source, web3Provider) {
        if (source === void 0) { source = true; }
        var _this = _super.call(this, web3Provider) || this;
        _this.name = types_1.NamingServiceName.CNS;
        /** @internal */
        _this.RegistryMap = {
            mainnet: '0xD1E5b0FF1287aA9f9A268759062E4Ab08b9Dacbe',
        };
        /** @internal */
        _this.getResolver = function (tokenId) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ignoreResolutionError(resolutionError_2.ResolutionErrorCode.RecordNotFound, this.callMethod(this.registryContract, 'resolverOf', [tokenId]))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        _this.getTtl = function (contract, methodname, params) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.callMethod(contract, methodname, params)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); };
        source = _this.normalizeSource(source);
        _this.network = source.network;
        _this.url = source.url;
        if (!_this.network) {
            throw new Error('Unspecified network in Resolution CNS configuration');
        }
        if (!_this.url) {
            throw new Error('Unspecified url in Resolution CNS configuration');
        }
        _this.registryAddress = source.registry
            ? source.registry
            : _this.RegistryMap[_this.network];
        if (_this.registryAddress) {
            _this.registryContract = _this.buildContract(registry_1.default, _this.registryAddress);
        }
        return _this;
    }
    /**
     * Checks if the domain is in valid format
     * @param domain - domain name to be checked
     * @returns
     */
    Cns.prototype.isSupportedDomain = function (domain) {
        return (domain === 'crypto' ||
            (domain.indexOf('.') > 0 &&
                /^.{1,}\.(crypto)$/.test(domain) &&
                domain.split('.').every(function (v) { return !!v.length; })));
    };
    /**
     * Resolves the given domain.
     * @deprecated
     * @param domain - domain name to be resolved
     * @returns- Returns a promise that resolves in an object
     */
    Cns.prototype.resolve = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('This method is unsupported for CNS');
            });
        });
    };
    /**
     * Resolves domain to a specific cryptoAddress
     * @param domain - domain name to be resolved
     * @param currencyTicker currency ticker such as
     *  - ZIL
     *  - BTC
     *  - ETH
     * @returns - A promise that resolves in a string
     */
    Cns.prototype.address = function (domain, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, ownerPromise, resolver, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        ownerPromise = this.owner(domain);
                        return [4 /*yield*/, this.getResolver(tokenId)];
                    case 1:
                        resolver = _a.sent();
                        if (!(!resolver || types_1.isNullAddress(resolver))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.throwOwnershipError(domain, ownerPromise)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.ignoreResolutionError(resolutionError_2.ResolutionErrorCode.RecordNotFound, this.fetchAddress(resolver, this.namehash(domain), currencyTicker))];
                    case 4:
                        addr = _a.sent();
                        if (!addr)
                            throw new resolutionError_1.default(resolutionError_2.ResolutionErrorCode.UnspecifiedCurrency, {
                                domain: domain,
                                currencyTicker: currencyTicker,
                            });
                        return [2 /*return*/, addr];
                }
            });
        });
    };
    /**
     * @internal
     * @param resolver - Resolver address
     * @param tokenId - namehash of a domain name
     */
    Cns.prototype.fetchAddress = function (resolver, tokenId, coinName) {
        return __awaiter(this, void 0, void 0, function () {
            var resolverContract, addrKey, addr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resolverContract = this.buildContract(resolver_1.default, resolver);
                        addrKey = "crypto." + coinName.toUpperCase() + ".address";
                        return [4 /*yield*/, this.getRecord(resolverContract, 'get', [
                                addrKey,
                                tokenId,
                            ])];
                    case 1:
                        addr = _a.sent();
                        return [2 /*return*/, addr];
                }
            });
        });
    };
    /**
     * Produces CNS namehash
     * @param domain - domain to be hashed
     * @returns CNS namehash of a domain
     */
    Cns.prototype.namehash = function (domain) {
        this.ensureSupportedDomain(domain);
        return namehash_1.default(domain);
    };
    /**
     * Returns the childhash
     * @param parent - nodehash of a parent
     * @param label - child
     */
    Cns.prototype.childhash = function (parent, label, options) {
        if (options === void 0) { options = { prefix: true }; }
        return namehash_1.childhash(parent, label, options);
    };
    /** @internal */
    Cns.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.callMethod(this.registryContract, 'ownerOf', [tokenId])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * resolves an ipfsHash stored on domain
     * @param domain - domain name
     */
    Cns.prototype.ipfsHash = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.record(domain, 'ipfs.html.value')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * resolves an email address stored on domain
     * @param domain - domain name
     */
    Cns.prototype.email = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.record(domain, 'whois.email.value')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * resolves an httpUrl stored on domain
     * @param domain - domain name
     */
    Cns.prototype.httpUrl = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.record(domain, 'ipfs.redirect_domain.value')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** @internal */
    Cns.prototype.record = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenId, resolver, resolverContract, record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenId = this.namehash(domain);
                        return [4 /*yield*/, this.getResolver(tokenId)];
                    case 1:
                        resolver = _a.sent();
                        resolverContract = this.buildContract(resolver_1.default, resolver);
                        return [4 /*yield*/, this.getRecord(resolverContract, 'get', [
                                key,
                                tokenId,
                            ])];
                    case 2:
                        record = _a.sent();
                        // Wrong Record checks
                        if (!record || types_1.isNullAddress(record))
                            throw new resolutionError_1.default(resolutionError_2.ResolutionErrorCode.RecordNotFound, {
                                recordName: key,
                                domain: domain,
                            });
                        return [2 /*return*/, record];
                }
            });
        });
    };
    /** This is done to make testwriting easy */
    Cns.prototype.getRecord = function (contract, methodname, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callMethod(contract, methodname, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Cns;
}(namingService_1.EthereumNamingService));
exports.default = Cns;
