(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('axios'), require('isomorphic-ws')) :
  typeof define === 'function' && define.amd ? define(['exports', 'axios', 'isomorphic-ws'], factory) :
  (factory((global['mycrypto-eth-exists'] = {}),global.axios,global['isomorphic-ws']));
}(this, (function (exports,axios,WebSocket) { 'use strict';

  axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;
  WebSocket = WebSocket && WebSocket.hasOwnProperty('default') ? WebSocket['default'] : WebSocket;

  function makeHttpRequest(config) {
      return axios
          .post(`${config.addr}:${config.port}`, '{"jsonrpc":"2.0","method":"net_version","params":[],"id":67}', {
          headers: {
              'Content-Type': 'application/json;charset=UTF-8',
              'Access-Control-Allow-Origin': '*',
          },
          timeout: config.timeout,
      })
          .then(r => {
          if (r.status !== 200) {
              throw Error('Request failed');
          }
          return r;
      });
  }
  function makeWsRequest(config) {
      const url = `${config.addr}:${config.port}`;
      console.log(url);
      const socket = new WebSocket(url, {
          handshakeTimeout: config.timeout,
      });
      return new Promise((resolve, reject) => {
          let timeout;
          socket.onopen = () => {
              clearTimeout(timeout);
              resolve('worked');
          };
          socket.onerror = e => {
              clearTimeout(timeout);
              reject(e);
          };
          timeout = setTimeout(() => {
              reject(Error('timeout'));
          }, config.timeout);
      });
  }
  function makeRequest(config) {
      switch (config.type) {
          case 'http':
              return makeHttpRequest(config);
          case 'ws':
              return makeWsRequest(config);
      }
  }

  const DEFAULT_WS = {
      type: 'ws',
      addr: 'ws://localhost',
      port: 8546,
      timeout: 5000,
  };
  const DEFAULT_HTTP = {
      type: 'http',
      addr: 'http://localhost',
      port: 8545,
      timeout: 5000,
  };
  const DEFAULT_CONFIGS = [DEFAULT_HTTP, DEFAULT_WS];
  function exists(configs = [], opts = { includeDefaults: true }) {
      const configsToCheck = [
          ...configs,
          ...(opts.includeDefaults ? DEFAULT_CONFIGS : []),
      ];
      const result = Promise.all(configsToCheck.map(c => makeRequest(c)
          .then(() => (Object.assign({}, c, { success: true })))
          .catch(e => (Object.assign({}, c, { success: false, error: e })))));
      return result;
  }

  exports.exists = exists;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mycrypto-eth-exists.umd.js.map
