{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\nimport { protocol } from 'electron';\nimport { PROTOCOL_NAME, isValidEventType } from 'shared/enclave/utils';\nimport handlers from './handlers';\nexport function registerServer(app) {\n  // Register protocol scheme\n  protocol.registerStandardSchemes([PROTOCOL_NAME]);\n  app.on('ready', function () {\n    // Register custom protocol behavior\n    protocol.registerStringProtocol(PROTOCOL_NAME,\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(req, cb) {\n        var res, method, params, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                method = getMethod(req);\n                params = getParams(method, req);\n                _context.next = 5;\n                return handlers[method](params);\n\n              case 5:\n                data = _context.sent;\n                res = {\n                  data: data\n                };\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Request to '\".concat(req.url, \"' failed with error:\"), _context.t0);\n                res = {\n                  error: {\n                    code: 500,\n                    type: _context.t0.name,\n                    message: _context.t0.message\n                  }\n                };\n\n              case 13:\n                cb(JSON.stringify(res));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n}\n\nfunction getMethod(req) {\n  var urlSplit = req.url.split(\"\".concat(PROTOCOL_NAME, \"://\"));\n\n  if (!urlSplit[1]) {\n    throw new Error('No method provided');\n  }\n\n  var method = urlSplit[1].replace('/', '');\n\n  if (!isValidEventType(method)) {\n    throw new Error(\"Invalid or unknown method '\".concat(method, \"'\"));\n  }\n\n  return method;\n}\n\nfunction getParams(method, req) {\n  var data = req.uploadData.find(function (d) {\n    return !!d.bytes;\n  });\n\n  if (!data) {\n    throw new Error(\"No data provided for '\".concat(method, \"'\"));\n  }\n\n  try {\n    // TODO: Validate params based on provided method\n    var params = JSON.parse(data.bytes.toString());\n    return params;\n  } catch (err) {\n    throw new Error(\"Invalid JSON blob provided for '\".concat(method, \"': \").concat(err.message));\n  }\n}\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(registerServer, \"registerServer\", \"/root/MyCrypto/shared/enclave/server/index.ts\");\n  reactHotLoader.register(getMethod, \"getMethod\", \"/root/MyCrypto/shared/enclave/server/index.ts\");\n  reactHotLoader.register(getParams, \"getParams\", \"/root/MyCrypto/shared/enclave/server/index.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}