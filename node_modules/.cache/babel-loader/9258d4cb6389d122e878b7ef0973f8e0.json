{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\nimport { shell, Menu, clipboard } from 'electron';\nimport { URL } from 'url';\n\nfunction popupContextMenu(window, isDevelopment, props) {\n  var editFlags = props.editFlags;\n  var hasText = props.selectionText.trim().length > 0;\n\n  var roleEnabled = function roleEnabled(flag) {\n    return editFlags[flag] && hasText;\n  }; // Not using the `enable` nor `visible` properties of MenuConstructorOptions\n  // As they do not appear to work w/ Electron 1.8.4 on Mac OS X\n\n\n  var ctxMenuTmpl = [];\n\n  if (roleEnabled('canCut') && props.isEditable) {\n    ctxMenuTmpl.push({\n      accelerator: 'CmdOrCtrl+X',\n      role: 'cut'\n    });\n  }\n\n  if (roleEnabled('canCopy') && hasText) {\n    ctxMenuTmpl.push({\n      accelerator: 'CmdOrCtrl+C',\n      role: 'copy'\n    });\n  } // For some reason, editFlags.canCopy is often false but the keyboard shortcut to paste still works\n  // let's only check if the currently focused element is editable\n\n\n  if (props.isEditable) {\n    ctxMenuTmpl.push({\n      accelerator: 'CmdOrCtrl+V',\n      role: 'paste'\n    });\n  }\n\n  if (props.linkURL && props.mediaType === 'none') {\n    ctxMenuTmpl = ctxMenuTmpl.concat([{\n      type: 'separator'\n    }, {\n      id: 'copyLink',\n      label: 'Copy Link',\n      click: function click() {\n        if (process.platform === 'darwin') {\n          clipboard.writeBookmark(props.linkText, props.linkURL);\n        } else {\n          clipboard.writeText(props.linkURL);\n        }\n      }\n    }, {\n      id: 'openLink',\n      label: 'Open Link in Browser',\n      click: function click() {\n        // Only allow HTTPS urls to actually be opened\n        var url = new URL(props.linkURL);\n\n        if (url.protocol === 'https:') {\n          shell.openExternal(props.linkURL);\n        } else {\n          console.warn(\"Blocked request to open new window '\".concat(props.linkURL, \"', only HTTPS links are allowed\"));\n        }\n      }\n    }]);\n  } // add the Inspect Element button\n\n\n  if (isDevelopment) {\n    ctxMenuTmpl = ctxMenuTmpl.concat([{\n      type: 'separator'\n    }, {\n      label: 'Inspect Element',\n      click: function click() {\n        window.webContents.inspectElement(props.x, props.y);\n\n        if (window.webContents.isDevToolsOpened()) {\n          window.webContents.devToolsWebContents.focus();\n        }\n      }\n    }]);\n  }\n\n  var ctxMenu = Menu.buildFromTemplate(ctxMenuTmpl);\n  var popupOpts = {\n    window: window,\n    x: props.x,\n    y: props.y\n  };\n  ctxMenu.popup(popupOpts);\n}\n\nvar _default = popupContextMenu;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(popupContextMenu, \"popupContextMenu\", \"/root/MyCrypto/electron-app/main/contextMenu.ts\");\n  reactHotLoader.register(_default, \"default\", \"/root/MyCrypto/electron-app/main/contextMenu.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}