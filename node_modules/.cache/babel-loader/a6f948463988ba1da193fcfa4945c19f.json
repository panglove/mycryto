{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\nimport { BrowserWindow, Menu, shell } from 'electron';\nimport { URL } from 'url';\nimport path from 'path';\nimport MENU from './menu';\nimport popupContextMenu from './contextMenu';\nimport { APP_TITLE } from '../constants';\nvar isDevelopment = process.env.NODE_ENV !== 'production'; // Cached reference, preventing recreations\n\nvar window; // Construct new BrowserWindow\n\nexport default function getWindow() {\n  if (window) {\n    return window;\n  }\n\n  window = new BrowserWindow({\n    title: APP_TITLE,\n    backgroundColor: '#fbfbfb',\n    width: 1220,\n    height: process.platform === 'darwin' ? 680 : 720,\n    minWidth: 480,\n    minHeight: 400,\n    titleBarStyle: 'hidden',\n    webPreferences: {\n      devTools: true,\n      nodeIntegration: true,\n      contextIsolation: false,\n      preload: path.join(__dirname, 'preload.js')\n    }\n  });\n  var appUrl = isDevelopment ? \"http://localhost:3000\" : \"file://\".concat(__dirname, \"/index.html\");\n  window.loadURL(appUrl);\n  window.on('closed', function () {\n    window = null;\n  });\n  window.webContents.on('new-window', function (ev, urlStr) {\n    // Kill all new window requests by default\n    ev.preventDefault(); // Only allow HTTPS urls to actually be opened\n\n    var url = new URL(urlStr);\n\n    if (url.protocol === 'https:') {\n      shell.openExternal(urlStr);\n    } else {\n      console.warn(\"Blocked request to open new window '\".concat(urlStr, \"', only HTTPS links are allowed\"));\n    }\n  });\n  window.webContents.on('context-menu', function (_, props) {\n    popupContextMenu(window, isDevelopment, props);\n  });\n  window.webContents.on('devtools-opened', function () {\n    window.focus();\n    setImmediate(function () {\n      window.focus();\n    });\n  });\n  window.webContents.on('will-navigate', function (event) {\n    event.preventDefault();\n  });\n\n  if (isDevelopment) {\n    window.webContents.on('did-fail-load', function () {\n      setTimeout(function () {\n        if (window && window.webContents) {\n          window.webContents.reload();\n        }\n      }, 500);\n    });\n  }\n\n  Menu.setApplicationMenu(Menu.buildFromTemplate(MENU));\n  return window;\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(isDevelopment, \"isDevelopment\", \"/root/MyCrypto/electron-app/main/window.ts\");\n  reactHotLoader.register(window, \"window\", \"/root/MyCrypto/electron-app/main/window.ts\");\n  reactHotLoader.register(getWindow, \"getWindow\", \"/root/MyCrypto/electron-app/main/window.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}