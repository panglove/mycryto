{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\nimport { EnclaveMethods } from './types';\nexport var PROTOCOL_NAME = 'eth-enclave';\nvar eventTypes = Object.values(EnclaveMethods);\nexport var isValidEventType = function isValidEventType(e) {\n  return eventTypes.includes(e);\n};\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(PROTOCOL_NAME, \"PROTOCOL_NAME\", \"/root/MyCrypto/shared/enclave/utils.ts\");\n  reactHotLoader.register(eventTypes, \"eventTypes\", \"/root/MyCrypto/shared/enclave/utils.ts\");\n  reactHotLoader.register(isValidEventType, \"isValidEventType\", \"/root/MyCrypto/shared/enclave/utils.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}