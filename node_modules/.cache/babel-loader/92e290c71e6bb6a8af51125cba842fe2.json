{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\nimport { Wei, toTokenBase } from 'libs/units';\nimport { addHexPrefix } from 'ethereumjs-util';\nexport function toHexWei(weiString) {\n  return addHexPrefix(Wei(weiString).toString(16));\n}\nexport function padLeftEven(hex) {\n  return hex.length % 2 !== 0 ? \"0\".concat(hex) : hex;\n}\nexport function sanitizeHex(hex) {\n  var hexStr = hex.substring(0, 2) === '0x' ? hex.substring(2) : hex;\n  return hex !== '' ? \"0x\".concat(padLeftEven(hexStr)) : '';\n}\nexport var buildEIP681EtherRequest = function buildEIP681EtherRequest(recipientAddr, chainId, etherValue) {\n  return \"ethereum:\".concat(recipientAddr).concat(chainId !== 1 ? \"@\".concat(chainId) : '', \"?value=\").concat(etherValue.raw, \"e18\");\n};\nexport var buildEIP681TokenRequest = function buildEIP681TokenRequest(recipientAddr, contractAddr, chainId, tokenValue, decimal, gasLimit) {\n  return \"ethereum:\".concat(contractAddr).concat(chainId !== 1 ? \"@\".concat(chainId) : '', \"/transfer?address=\").concat(recipientAddr, \"&uint256=\").concat(toTokenBase(tokenValue.raw, decimal), \"&gas=\").concat(gasLimit.raw);\n};\nexport var sanitizeNumericalInput = function sanitizeNumericalInput(input) {\n  var inputFloat = Number(input);\n\n  if (!input || isNaN(inputFloat)) {\n    return input;\n  } // limit input field decrement to 0\n\n\n  if (inputFloat === -1) {\n    return '0';\n  } // convert negative values to positive\n\n\n  return Math.abs(inputFloat).toString();\n};\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(toHexWei, \"toHexWei\", \"/root/MyCrypto/common/libs/values.ts\");\n  reactHotLoader.register(padLeftEven, \"padLeftEven\", \"/root/MyCrypto/common/libs/values.ts\");\n  reactHotLoader.register(sanitizeHex, \"sanitizeHex\", \"/root/MyCrypto/common/libs/values.ts\");\n  reactHotLoader.register(buildEIP681EtherRequest, \"buildEIP681EtherRequest\", \"/root/MyCrypto/common/libs/values.ts\");\n  reactHotLoader.register(buildEIP681TokenRequest, \"buildEIP681TokenRequest\", \"/root/MyCrypto/common/libs/values.ts\");\n  reactHotLoader.register(sanitizeNumericalInput, \"sanitizeNumericalInput\", \"/root/MyCrypto/common/libs/values.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}