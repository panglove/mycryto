{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal[\"default\"].signature : function (a) {\n  return a;\n};\n\nimport BN from 'bn.js';\nimport { toBuffer, addHexPrefix } from 'ethereumjs-util';\nimport { stripHexPrefix } from 'libs/formatters';\nexport var ETH_DECIMAL = 18;\nexport var Units = {\n  wei: '1',\n  kwei: '1000',\n  ada: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  babbage: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  einstein: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000'\n};\n\nvar handleValues = function handleValues(input) {\n  if (typeof input === 'string') {\n    return input.startsWith('0x') ? new BN(stripHexPrefix(input), 16) : new BN(input);\n  }\n\n  if (typeof input === 'number') {\n    return new BN(input);\n  }\n\n  if (BN.isBN(input)) {\n    return input;\n  } else {\n    throw Error('unsupported value conversion');\n  }\n};\n\nvar Address = function Address(input) {\n  return toBuffer(addHexPrefix(input));\n};\n\nvar Data = function Data(input) {\n  return toBuffer(addHexPrefix(input));\n};\n\nvar Nonce = function Nonce(input) {\n  return handleValues(input);\n};\n\nvar Wei = function Wei(input) {\n  return handleValues(input);\n};\n\nvar TokenValue = function TokenValue(input) {\n  return handleValues(input);\n};\n\nvar getDecimalFromEtherUnit = function getDecimalFromEtherUnit(key) {\n  return Units[key].length - 1;\n};\n\nvar stripRightZeros = function stripRightZeros(str) {\n  var strippedStr = str.replace(/0+$/, '');\n  return strippedStr === '' ? null : strippedStr;\n};\n\nvar baseToConvertedUnit = function baseToConvertedUnit(value, decimal) {\n  if (decimal === 0) {\n    return value;\n  }\n\n  var paddedValue = value.padStart(decimal + 1, '0'); //0.1 ==>\n\n  var integerPart = paddedValue.slice(0, -decimal);\n  var fractionPart = stripRightZeros(paddedValue.slice(-decimal));\n  return fractionPart ? \"\".concat(integerPart, \".\").concat(fractionPart) : \"\".concat(integerPart);\n};\n\nvar convertedToBaseUnit = function convertedToBaseUnit(value, decimal) {\n  if (decimal === 0) {\n    return value;\n  }\n\n  var _value$split = value.split('.'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      integerPart = _value$split2[0],\n      _value$split2$ = _value$split2[1],\n      fractionPart = _value$split2$ === void 0 ? '' : _value$split2$;\n\n  var paddedFraction = fractionPart.padEnd(decimal, '0');\n  return \"\".concat(integerPart).concat(paddedFraction);\n};\n\nvar fromWei = function fromWei(wei, unit) {\n  var decimal = getDecimalFromEtherUnit(unit);\n  return baseToConvertedUnit(wei.toString(), decimal);\n};\n\nvar toWei = function toWei(value, decimal) {\n  var wei = convertedToBaseUnit(value, decimal);\n  return Wei(wei);\n};\n\nvar fromTokenBase = function fromTokenBase(value, decimal) {\n  return baseToConvertedUnit(value.toString(), decimal);\n};\n\nvar toTokenBase = function toTokenBase(value, decimal) {\n  return TokenValue(convertedToBaseUnit(value, decimal));\n};\n\nvar convertTokenBase = function convertTokenBase(value, oldDecimal, newDecimal) {\n  if (oldDecimal === newDecimal) {\n    return value;\n  }\n\n  return toTokenBase(fromTokenBase(value, oldDecimal), newDecimal);\n};\n\nvar gasPriceToBase = function gasPriceToBase(price) {\n  return toWei(price.toString(), getDecimalFromEtherUnit('gwei'));\n};\n\nexport { Data, Address, TokenValue, fromWei, toWei, toTokenBase, fromTokenBase, convertTokenBase, Wei, getDecimalFromEtherUnit, Nonce, handleValues, gasPriceToBase };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ETH_DECIMAL, \"ETH_DECIMAL\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(Units, \"Units\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(handleValues, \"handleValues\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(Address, \"Address\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(Data, \"Data\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(Nonce, \"Nonce\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(Wei, \"Wei\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(TokenValue, \"TokenValue\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(getDecimalFromEtherUnit, \"getDecimalFromEtherUnit\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(stripRightZeros, \"stripRightZeros\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(baseToConvertedUnit, \"baseToConvertedUnit\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(convertedToBaseUnit, \"convertedToBaseUnit\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(fromWei, \"fromWei\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(toWei, \"toWei\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(fromTokenBase, \"fromTokenBase\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(toTokenBase, \"toTokenBase\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(convertTokenBase, \"convertTokenBase\", \"/root/MyCrypto/common/libs/units.ts\");\n  reactHotLoader.register(gasPriceToBase, \"gasPriceToBase\", \"/root/MyCrypto/common/libs/units.ts\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"module"}